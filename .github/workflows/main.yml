name: Deploy Hugo Site

on:
  workflow_dispatch:
  push:
    branches:
      - posts  # Trigger workflow when files are pushed to the 'posts' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures all branches are available

      # Step 2: Update Content on Master Branch
      - name: Update Content on Master Branch
        run: |
          # Configure Git for commits
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch origin posts
          git switch posts
          git fetch origin master
          git switch master
          git switch posts
          mkdir -p ../temp-md-files
          mv *.md ../temp-md-files
          git add .
          git commit -m "posts moved to maaster"
          # git push origin posts
          
          git switch master
          mv ../temp-md-files/*.md content/Posts
          rm -r ../temp-md-files/
          git add content/Posts/ 
          git commit -m "recived new posts"/
          git push origin master
      - name: Clean up posts branch
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git fetch origin posts
          git switch posts
          
          find -mindepth 1 ! -path '*/.*' -exec rm -rf {} +   
          git add .
          # git commit -m "cleared"
          
          # git fetch origin posts
          # git switch posts
          # git merge clean --allow-unrelated-histories
          # git branch -d clean
          git push origin posts
          
      # Step 3: Setup Hugo
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: "0.139.4"
          extended: true
    # Specify your Hugo version

      # Step 4: Build the Site
      - name: Build Hugo Site
        run: |
          git switch master
          git submodule sync --recursive

          echo "content in themes"
          ls themes

          echo "content in themes/hermit-V2"
          ls themes/hermit-V2
          
          git submodule update --remote themes/hermit-V2
          
          echo "content in themes"
          ls themes

          echo "content in themes/hermit-V2"
          ls themes/hermit-V2
          
          git submodule update --init --recursive --force
          
          echo "content in themes"
          ls themes

          echo "content in themes/hermit-V2"
          ls themes/hermit-V2
          
          hugo
          git add .
          git commit -m "new build"
          git push origin master
          
      # Step 5: Deploy to 'For-Hosting' Branch
      - name: Deploy to For-Hosting
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git switch For-Hosting  # Switch to 'For-Hosting' branch
          git fetch origin master
          git switch master
          # git add .
          # git commit -m "backup the old version"
          
          # git subtree push --prefix public origin For-Hosting --force
          git subtree split --prefix public -b deploy
          git push origin deploy:For-Hosting --force
          git branch -D deploy

