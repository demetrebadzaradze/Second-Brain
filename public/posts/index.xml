<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
	<channel>
		<title>Posts on Second-Brain</title>
		<link>https://demetrebadzaradze.github.io/Second-Brain/posts/</link>
		<description>Recent content in Posts on Second-Brain</description>
		<generator>Hugo -- 0.139.4</generator>
		<language>en-us</language>
		<copyright>The actual content on this site other then code is under [CC BY-NC 4.0](http://creativecommons.org/licenses/by-nc/4.0/) licence</copyright>
		<lastBuildDate>Wed, 10 Sep 2025 00:00:00 +0000</lastBuildDate>
		<atom:link href="https://demetrebadzaradze.github.io/Second-Brain/posts/index.xml" rel="self" type="application/rss+xml" />
		
		
		<item>
			<title>RESUME</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/me/</link>
			<pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/me/</guid>
			<description><![CDATA[My resume]]></description><content type="text/html" mode="escaped"><![CDATA[<h1 id="demetre-badzgaradze"><strong>Demetre Badzgaradze</strong><a href="#demetre-badzgaradze" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p>Tbilisi, Georgia ‚Ä¢ <a href="mailto:badzgaradzedemetre8@gmail.com">badzgaradzedemetre8@gmail.com</a><br>
<a href="https://www.linkedin.com/in/demetre-badzgaradze-b49153291/">LinkedIn</a> ‚Ä¢ <a href="https://github.com/demetrebadzaradze/">GitHub</a> ‚Ä¢ <a href="https://demetrebadzaradze.github.io/Second-Brain/">Portfolio</a></p>
<hr>
<h2 id="-projects">üíª Projects<a href="#-projects" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>üêù InstaSwarm</strong>
<em>Technologies: C#, .NET API, Docker, IG-API, yt-dlp</em>
<a href="https://github.com/demetrebadzaradze/InstaSwarm">üì¶ GitHub Repo</a></p>
<ul>
<li>Send reel that you like to and Admin account and upload it to others.</li>
<li>Designed a distributed bot cluster system to automate Instagram content re-uploading/upluading across multiple accounts.</li>
<li>Built in .NET and Docker for containerized deployment.</li>
<li>Integrated Indtagram API and yt-dlp for flexible media ingestion pipelines.</li>
<li>Architecture is extensible to other platforms (TikTok, YouTube) for future scaling.</li>
</ul>
<hr>
<p><strong>üìö Second-Brain</strong><br>
<em>Technologies: HTML, Hugo, CI/CD, GitHub Actions</em><br>
<a href="https://demetrebadzaradze.github.io/Second-Brain/posts">üåê Website</a> ‚Ä¢ <a href="https://github.com/demetrebadzaradze/Second-Brain/">üì¶ GitHub Repo</a></p>
<ul>
<li>Built a fast, clean personal knowledge management blog using the <strong>Hugo</strong> static site generator.</li>
<li>Deployed on <strong>GitHub Pages</strong>, with automatic publishing powered by <strong>GitHub Actions</strong>.</li>
<li>Write content in <strong>Obsidian</strong>, where custom command publishes notes directly from the editor.</li>
<li>The average time from note to published blog is under 9 seconds thanks to automation.</li>
</ul>
<hr>
<p><strong>‚öôÔ∏è Effective-Giggle</strong><br>
<em>Technologies: C#, .NET Core API, AMPL, TailwindCSS, HTMX</em><br>
<a href="https://github.com/demetrebadzaradze/effective-giggle-Backend">üîô Backend Repo</a> ‚Ä¢ <a href="https://demetrebadzaradze.github.io/effective-giggle/">üåê Frontend Example</a></p>
<ul>
<li>Solves real-world product optimization problems using constraints and product properties.</li>
<li>Built the backend using <strong>.NET Core Web API</strong> to generate and solve mathematical models using <strong>AMPL</strong>.</li>
<li>Frontend uses <strong>HTMX</strong> for dynamic interaction and <strong>TailwindCSS</strong> for quick and responsive styling.</li>
</ul>
<hr>
<p><strong>üè† Home Server Setup</strong><br>
*Technologies: Ubuntu Server, Docker, Jellyfin, Nextcloud, SQL Server, Tailscale VPN, *</p>
<ul>
<li>Repurposed and upgraded an old laptop into a reliable home server running 24/7.</li>
<li>Hosts media (via <strong>Jellyfin</strong>), cloud storage (<strong>Nextcloud</strong>), private game servers, SQL databases, DNS server and a VPN.</li>
<li>Configured remote access using <strong>Tailscale</strong> VPN to bypass CG-NAT limitations.</li>
<li>Uses <strong>Docker</strong> to manage and deploy services cleanly and efficiently.</li>
</ul>
<hr>
<h2 id="-skills">üõ†Ô∏è Skills<a href="#-skills" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><strong>Programming:</strong> C#, Python, HTML/CSS, Bash</li>
<li><strong>Frameworks &amp; Tools:</strong> .NET Core, HTMX, TailwindCSS, Hugo, AMPL</li>
<li><strong>DevOps &amp; Hosting:</strong> GitHub Actions, Docker, GitHub Pages, Tailscale VPN</li>
<li><strong>Systems:</strong> Linux (Ubuntu Server), Git, SQL Server, Nextcloud, Jellyfin</li>
<li><strong>Interests:</strong> Game Development, Automation, Self-Hosting, Optimization</li>
</ul>
<hr>
<h2 id="-summary">üß† Summary<a href="#-summary" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Self-taught developer with a passion for building fast, useful tools and solving real-world problems.<br>
From creating a personal blog system powered by GitHub Actions to deploying backend optimization APIs,<br>
I specialize in making things work‚Äîefficiently, securely, and with minimal friction.<br>
Always exploring new technologies and learning by doing.</p>
]]></content>
		</item>
		
		<item>
			<title>How to change theme for Hugo</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/how-to-change-theme-for-hugo/</link>
			<pubDate>Wed, 10 Sep 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/how-to-change-theme-for-hugo/</guid>
			<description><![CDATA[ Step-by-step guide to updating the Hugo theme for your Second Brain blog]]></description><content type="text/html" mode="escaped"><![CDATA[<p><a href="https://github.com/demetrebadzaradze/Second-Brain/">Second Brain</a> uses the Hermit-v2 theme by default to provide a clean, modern look for your blog. However, you can easily switch to a different Hugo theme to customize the appearance of your site. This guide provides step-by-step instructions to update the theme by modifying the Git submodule and Hugo configuration.</p>
<h2 id="prerequisites">Prerequisites<a href="#prerequisites" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>A forked and cloned copy of the Second Brain repository.</li>
<li>Git installed on your local machine.</li>
<li>Basic familiarity with Hugo and Git submodules.</li>
<li>Access to the repository‚Äôs <code>master</code> branch for configuration changes.</li>
</ul>
<h2 id="steps-to-change-the-theme">Steps to Change the Theme<a href="#steps-to-change-the-theme" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Follow these steps to replace the Hermit-v2 theme with a new Hugo theme:</p>
<ol>
<li>
<p><strong>Select a New Theme</strong>:</p>
<ul>
<li>Browse the Hugo Themes directory to find a theme that suits your needs.</li>
<li>Note the theme‚Äôs Git repository URL and the recommended branch (usually <code>main</code> or <code>master</code>). For example, if you choose the Ananke theme, the repository URL is <code>https://github.com/theNewDynamic/gohugo-theme-ananke</code>.</li>
</ul>
</li>
<li>
<p><strong>Update the Git Submodule</strong>:</p>
<ul>
<li>
<p>Open the <code>.gitmodules</code> file in the root of your repository.</p>
</li>
<li>
<p>Replace the existing submodule configuration with the new theme‚Äôs details. The file should follow this format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-ini" data-lang="ini"><span class="line"><span class="cl"><span class="k">[submodule &#34;themes/&lt;theme-name&gt;&#34;]</span>
</span></span><span class="line"><span class="cl"> <span class="na">path</span> <span class="o">=</span> <span class="s">themes/&lt;theme-name&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">     url = &lt;theme-git-repo-url&gt;
</span></span></span><span class="line"><span class="cl"><span class="s">     branch = &lt;theme-branch&gt;
</span></span></span><span class="line"><span class="cl"><span class="s"> ```</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="na">Example for the Ananke theme:</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="na">```ini</span>
</span></span><span class="line"><span class="cl"><span class="k">[submodule &#34;themes/gohugo-theme-ananke&#34;]</span>
</span></span><span class="line"><span class="cl"> <span class="na">path</span> <span class="o">=</span> <span class="s">themes/gohugo-theme-ananke
</span></span></span><span class="line"><span class="cl"><span class="s"> url = https://github.com/theNewDynamic/gohugo-theme-ananke
</span></span></span><span class="line"><span class="cl"><span class="s"> branch = main</span>
</span></span></code></pre></div></li>
<li>
<p>Save and commit the updated <code>.gitmodules</code> file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add .gitmodules
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Update .gitmodules to use new theme&#34;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Sync and Update the Submodule</strong>:</p>
<ul>
<li>
<p>Remove the existing theme‚Äôs submodule data:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rm -r themes/hermit-v2
</span></span></code></pre></div></li>
<li>
<p>Add and initialize the new theme‚Äôs submodule:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add --force &lt;theme-git-repo-url&gt; themes/&lt;theme-name&gt;
</span></span></code></pre></div><p>Example:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule add --force https://github.com/theNewDynamic/gohugo-theme-ananke themes/gohugo-theme-ananke
</span></span></code></pre></div></li>
<li>
<p>Ensure the submodule is initialized and updated:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git submodule update --init --recursive
</span></span></code></pre></div></li>
<li>
<p>Commit the changes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add themes/&lt;theme-name&gt;
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Add new theme submodule&#34;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Update Hugo Configuration</strong>:</p>
<ul>
<li>
<p>Open the <code>hugo.toml</code> file in the root of your repository.</p>
</li>
<li>
<p>Update the <code>theme</code> parameter to match the new theme‚Äôs directory name:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">theme</span> <span class="p">=</span> <span class="s2">&#34;&lt;theme-name&gt;&#34;</span>
</span></span></code></pre></div><p>Example for Ananke:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="nx">theme</span> <span class="p">=</span> <span class="s2">&#34;gohugo-theme-ananke&#34;</span>
</span></span></code></pre></div></li>
<li>
<p>Review the theme‚Äôs documentation (usually in its <code>README.md</code>) for additional configuration options, such as custom parameters or assets. Update <code>hugo.toml</code> accordingly.</p>
</li>
<li>
<p>Example for Ananke:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-toml" data-lang="toml"><span class="line"><span class="cl"><span class="p">[</span><span class="nx">params</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">  <span class="nx">favicon</span> <span class="p">=</span> <span class="s2">&#34;images/favicon.ico&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">site_logo</span> <span class="p">=</span> <span class="s2">&#34;images/logo.png&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="nx">background_image</span> <span class="p">=</span> <span class="s2">&#34;/images/background.jpg&#34;</span>
</span></span></code></pre></div></li>
<li>
<p>Save and commit the changes:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git add hugo.toml
</span></span><span class="line"><span class="cl">git commit -m <span class="s2">&#34;Update hugo.toml for new theme&#34;</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><strong>Test the Theme Locally</strong>:</p>
<ul>
<li>
<p>Run the Hugo development server to preview the site with the new theme:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">hugo server
</span></span></code></pre></div></li>
<li>
<p>Open <code>http://localhost:1313</code> in your browser to verify the theme is applied correctly.</p>
</li>
<li>
<p>Check for errors or missing assets, and consult the theme‚Äôs documentation for troubleshooting.</p>
</li>
</ul>
</li>
<li>
<p><strong>Push Changes to GitHub</strong>:</p>
<ul>
<li>
<p>Push the updated <code>master</code> branch to your repository:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git push origin master
</span></span></code></pre></div></li>
<li>
<p>The GitHub Action will trigger, rebuilding the site and deploying it to the <code>For-Hosting</code> branch for GitHub Pages.</p>
</li>
</ul>
</li>
<li>
<p><strong>Verify the Live Site</strong>:</p>
<ul>
<li>Visit your site (e.g., <code>https://&lt;username&gt;.github.io/Second-Brain/</code>) to ensure the new theme is live.</li>
<li>Test navigation, responsiveness, and content rendering on multiple devices.</li>
</ul>
</li>
</ol>
<h2 id="troubleshooting">Troubleshooting<a href="#troubleshooting" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><strong>Submodule Errors</strong>: If the submodule doesn‚Äôt load, run <code>git submodule sync</code> followed by <code>git submodule update --init --recursive</code>.</li>
<li><strong>Theme Configuration</strong>: Ensure all required parameters are set in <code>hugo.toml</code>. Check the theme‚Äôs documentation for mandatory settings.</li>
<li><strong>Broken Styles</strong>: If the site looks incorrect, verify that theme assets (e.g., CSS, images) are correctly placed in <code>themes/&lt;theme-name&gt;</code> or <code>static/</code>.</li>
<li><strong>GitHub Actions Failure</strong>: Check the Actions tab in your repository for build errors, such as missing dependencies or incorrect paths.</li>
</ul>
<h2 id="additional-tips">Additional Tips<a href="#additional-tips" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><strong>Backup Your Repository</strong>: Before making changes, create a backup branch (<code>git branch backup</code>) to preserve your current setup.</li>
<li><strong>Test Theme Compatibility</strong>: Some themes may require specific Hugo versions. Check your Hugo version (<code>hugo version</code>) and the theme‚Äôs requirements.</li>
<li><strong>Customize the Theme</strong>: After switching, customize the theme‚Äôs colors, fonts, or layout in <code>hugo.toml</code> or by adding custom CSS in <code>static/css/</code>.</li>
<li><strong>Document Changes</strong>: Update your README or a changelog to note the new theme and any specific configuration steps.</li>
</ul>
<h2 id="need-help">Need Help?<a href="#need-help" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>If you encounter issues or need assistance selecting a theme, check the Hugo Themes directory or open an issue in the Second Brain repository. Contributions to improve theme support are welcome!</p>
]]></content>
		</item>
		
		<item>
			<title>Setting up PI-Hole</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/setting-up-pi-hole/</link>
			<pubDate>Mon, 01 Sep 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/setting-up-pi-hole/</guid>
			<description><![CDATA[Are you also tired of ads, I certainly am so don&#39;t i get the network wide ad blocker like  PI-Hole. It looks like a  cool piece of software and i kind of want an ad blocker and it will be better if its network wide thing and added my VPN its a strong combo despite my CG-NAT limitations]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="my-setup">My setup<a href="#my-setup" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Currently I have small low end server witch is behind a <code>CG-NAT</code>, but I have a VPN so this ad blocker should work if I&rsquo;m away.
Also i want it as a container, so I will use <a href="https://github.com/pi-hole/docker-pi-hole">pi-hole docker version</a>. Reason why I went for container is little influenced by <a href="https://github.com/mrjackwills/oxker">this</a> project. It is really cool, it displays docker containers and logs and info about them in a terminal.</p>
<hr>
<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li>Read the docs and get familiar with the tool</li>
<li>Install it on the server</li>
<li>Update per device DNS settings or the router DNS settings</li>
</ol>
<hr>
<h2 id="docs-and-helpful-information">Docs and helpful information<a href="#docs-and-helpful-information" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><a href="https://pi-hole.net/">pi-hole website</a>
<a href="https://docs.pi-hole.net/">pi-hole docs website</a>
<a href="https://www.youtube.com/watch?v=KBXTnrD_Zs4">Linus&rsquo;s video about pi-hole</a>
<a href="https://github.com/pi-hole">pi-hole Github</a></p>
<hr>
<h2 id="installation-on-the-server">Installation on the server<a href="#installation-on-the-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Install as container is pretty simple from <a href="https://github.com/pi-hole/docker-pi-hole">this repo</a> as they have nice compose file in a <a href="https://github.com/pi-hole/docker-pi-hole/blob/master/README.md#quick-start">Readme</a>. But it will not work for my setup, Because my DNS, HTTPS and HTTP ports are already in use. HTTP/HTTPS in no problem but DNS ports are different. I don&rsquo;t want to stop one that&rsquo;s in use already so my <code>compose.yml</code> file looks like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">pihole</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">pihole</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">pihole/pihole:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;53:53/tcp&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;53:53/udp&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;9000:80/tcp&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s2">&#34;9443:443/tcp&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">TZ</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;Etc/GMT&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">FTLCONF_webserver_api_password</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;ExTrAeXtRa__STRONG__PaSsWoRd&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">FTLCONF_dns_listeningMode</span><span class="p">:</span><span class="w"> </span><span class="s1">&#39;all&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="s1">&#39;./etc-pihole:/etc/pihole&#39;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">cap_add</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">SYS_NICE</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span></code></pre></div><hr>
<h2 id="making-pi-hole-host-use-pi-hole">Making Pi-hole host use Pi-hole<a href="#making-pi-hole-host-use-pi-hole" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>and since I&rsquo;m on ubuntu server i still need some modifications, like adding this:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">static domain_name_servers=127.0.0.1
</code></pre><p>to this file <code>/etc/dhcpcd.conf</code>.
And also stopping and disabling <code>systemd-resolved.service</code> service:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl stop systemd-resolved.service
</span></span><span class="line"><span class="cl">sudo systemctl disable systemd-resolved.service
</span></span></code></pre></div><p>and make sure that inside <code>/etc/resolv.conf</code> <code>nameserver</code> is not something local set it to google as DNS provider:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">nameserver=8.8.8.8
</code></pre><hr>
<h2 id="making-your-network-take-advantage-of-pi-hole">Making your network take advantage of Pi-hole<a href="#making-your-network-take-advantage-of-pi-hole" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>So here we need to configure router to use my servers pi-hole as DNS server and the app will block malicious sites, ads and unwanted sites.
Each router is different but generally its under <code>Advanced &gt; IP Adrresing &gt; DHCP Settings</code>. there are many docs for understanding this further like <a href="https://docs.pi-hole.net/main/post-install/#making-your-network-take-advantage-of-pi-hole">here</a></p>
<hr>
<h2 id="accessing-web-ui-of-pi-hole">Accessing web UI of Pi-Hole<a href="#accessing-web-ui-of-pi-hole" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>The settings and whole dashboard is web based so go to your server&rsquo;s IP address and application&rsquo;s port and enter the password for login. If you didn&rsquo;t set the password it will generate a random one and print that in logs, be sure to change it afterwards. after that you have full accesses to this powerful application.</p>
]]></content>
		</item>
		
		<item>
			<title>Making SSH-Keys</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/making-ssh-keys/</link>
			<pubDate>Sat, 16 Aug 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/making-ssh-keys/</guid>
			<description><![CDATA[here i will be setting up ssh keys for my server bc im tired of entering my password aggain and aggain and aggain and it is more secure.]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="what-are-ssh-keys">What are SSH Keys<a href="#what-are-ssh-keys" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>normally if one needs to connect to remote server/machine they would use <code>secure shell</code> this is a go to way it is secure as the name implies but this way is not protected against brute force attacks. SSH keys does something different to get you connected, it makes keys one for client (private) and one for server (public). once you share the public one to the server, it sends &lsquo;puzzle&rsquo; based on that public key to you and if your private key can solve that than you are authenticated. so it is basically a if server and client have valid key pair than it lets you in.</p>
<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li>we need a key pair (public and private)</li>
<li>share public kay to the server test it out</li>
<li>optionally disable password login</li>
</ol>
<h2 id="making-key-pair">Making key pair<a href="#making-key-pair" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<blockquote>
<p><strong><em>NOTE:</em></strong> <code>SSH</code> is installed on Windows mac OS and most Linux&rsquo;s by default and it will be needed off course.</p>
</blockquote>
<p>key gen is is pretty simple run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-keygen
</span></span></code></pre></div><ul>
<li>it will ask for a file name for keys and these must be inside <code>.ssh</code> folder. it makes key with default name if input is empty. could use that but naming it better practice.</li>
<li>it also will ask for a <code>passphrase</code> witch is an extra layer of protection and is recommended to set but could be done with this empty too.</li>
<li>this command than saves one files with he name you entered that&rsquo;s private key and one with <code>.pub</code> extension the public key.</li>
<li>and output should look like this:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">C:<span class="se">\U</span>sers<span class="se">\u</span>ser&gt;ssh-keygen
</span></span><span class="line"><span class="cl">Generating public/private ed25519 key pair.
</span></span><span class="line"><span class="cl">Enter file in which to save the key <span class="o">(</span>C:<span class="se">\U</span>sers<span class="se">\u</span>ser/.ssh/id_ed25519<span class="o">)</span>: <span class="nb">test</span>
</span></span><span class="line"><span class="cl">Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
</span></span><span class="line"><span class="cl">Enter same passphrase again:
</span></span><span class="line"><span class="cl">Your identification has been saved in <span class="nb">test</span>
</span></span><span class="line"><span class="cl">Your public key has been saved in test.pub
</span></span><span class="line"><span class="cl">The key fingerprint is:
</span></span><span class="line"><span class="cl">SHA256:********/******+****+****/*/************ user@host
</span></span><span class="line"><span class="cl">The keys randomart image is:
</span></span><span class="line"><span class="cl">+--<span class="o">[</span>ED25519 256<span class="o">]</span>--+
</span></span><span class="line"><span class="cl"><span class="p">|</span>          +      <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>         . E     <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>        .   .    <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>     . . o      .<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>      <span class="o">=</span> S +    ..<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>       <span class="o">=</span> + o o +.<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>  .     <span class="nv">o</span> <span class="o">=</span> BoTm <span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>   .     + X +BX+<span class="p">|</span>
</span></span><span class="line"><span class="cl"><span class="p">|</span>     .    o *e<span class="nv">$@</span>+<span class="p">|</span>
</span></span><span class="line"><span class="cl">+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
</span></span></code></pre></div></li>
</ul>
<h2 id="share-public-key-to-server">Share public key to server<a href="#share-public-key-to-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>The server should have a <code>~/.ssh/authorized_keys</code> file (if not make it) and your public key (the contents of the generated file that has .pub extension) should be copied there as new line.</p>
<p>All of this is is easily done with this command:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh-copy-id -i &lt;path to your public key file&gt; &lt;username <span class="k">for</span> server&gt;@&lt;server ip or domain name&gt;
</span></span></code></pre></div><p>But sometimes <code>ssh-copy-id</code> command is not available by default especially on Windows so you need do all of what that command does manually like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">cat &lt;path to public key file&gt; <span class="p">|</span> ssh &lt;server username&gt;@&lt;server ip or domain&gt; <span class="s2">&#34;mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys&#34;</span>
</span></span></code></pre></div><p>or from Windows replace first host <code>cat</code> command to <code>type</code> like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">type</span> &lt;path to public key file&gt; <span class="p">|</span> ssh user@your-server <span class="s2">&#34;mkdir -p ~/.ssh &amp;&amp; chmod 700 ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys &amp;&amp; chmod 600 ~/.ssh/authorized_keys&#34;</span>
</span></span></code></pre></div><p>Or just do it manually. (what i did)</p>
<h3 id="testing">Testing<a href="#testing" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>to test if this works you just try  to connect to server:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh &lt;username&gt;@&lt;server ip or domain&gt;
</span></span></code></pre></div><p>and it should not ask for password.</p>
<h2 id="disable-password-login">Disable password login<a href="#disable-password-login" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>at this point if you just want to do an auto login this is not required, as you see in testing, but if you want users to only connect with keys you add as an administrator and make server more secure disabling password based login.</p>
<p>the configuration for <code>SSH</code> as server is at <code>/etc/ssh/sshd_config</code> so you would just edit that like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo nano /etc/ssh/sshd_config
</span></span></code></pre></div><p>and disable some stuff like:</p>
<ul>
<li><code>PermitRootLogin</code> to <code>no</code> - this allows users to login as <code>root</code> as username. and we are disabling that with <code>no</code>.</li>
<li><code>PasswordAuthentication</code> to <code>no</code> - this will disable password authentication.</li>
<li><code>PermitEmptyPasswords</code> to <code>no</code> - so empty passwords cant come in.</li>
<li><code>Use PAM</code> to <code>no</code>
also could use</li>
<li><code>AuthenticationMethod</code> to <code>publickey</code> - this sets public key as only Authentication method.</li>
<li><code>AllowUsers</code> to users you want to to be able to connect with <code>SSH</code>
so appley ones that you want.</li>
</ul>
<p>and restart <code>ssh</code> services with:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl restart ssh
</span></span></code></pre></div>]]></content>
		</item>
		
		<item>
			<title>Instaswarm</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/instaswarm/</link>
			<pubDate>Mon, 04 Aug 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/instaswarm/</guid>
			<description><![CDATA[Private repo demo from my github]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="instaswarm">Instaswarm<a href="#instaswarm" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>Instaswarm is an Instagram content publishing bot cluster, that can be managed from one account.</strong> for now application is container based .NET app that has endpoint for Instagram webhook and based on that it uploads reels to multiple accounts.</p>
<h2 id="how-does-it-works-at-its-core">How does it works at its core<a href="#how-does-it-works-at-its-core" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>At its base its just a .NET docker Container that runs an endpoint for Instagram webhook.</li>
<li>when the request app ignores everything that is not a message from admin user, must have an Reel attachment and must have a needed post count.</li>
<li>then it goes on the link that attachment is from, downloads it.</li>
<li>fixes name and recaptions it if available.</li>
<li>then uploads on each account.</li>
</ul>
<h2 id="install">Install<a href="#install" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>first there list of stuff needed</p>
<h3 id="prerequisite">prerequisite<a href="#prerequisite" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ol>
<li>server where this container can live at. could be anything and with help of the <a href="https://tailscale.com/">Tailscale VPN</a> funneling it is a breeze, also anything that can get app endpoint and a video directory online will work but i will not cover that. i will only cover Linux server.</li>
<li><code>Tailscale</code> VPN is needed for getting endpoint and video directory online and accessible for whole internet.</li>
<li><code>git</code> to clone the repo.</li>
<li><code>docker compose</code> for building and running the container.</li>
</ol>
<h3 id="setup">Setup<a href="#setup" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<h4 id="clone-this-repo-with-git">clone this repo with git<a href="#clone-this-repo-with-git" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/demetrebadzaradze/InstaSwarm.git
</span></span></code></pre></div><p>and also have directory for videos, this must be outside of the project directory like:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir ../videos
</span></span><span class="line"><span class="cl">sudo chown <span class="m">1000</span> ../videos
</span></span><span class="line"><span class="cl">chmod <span class="m">777</span> ../videos
</span></span></code></pre></div><p>make sure you own the directory and use proper permissions <code>777</code> might be overkill but this is what worked for me.</p>
<h4 id="get-tailscale">Get Tailscale<a href="#get-tailscale" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<ol>
<li>download it from <a href="https://tailscale.com/download/linux">here</a> and go thru setup process.</li>
<li>enable funnel. learn <a href="https://tailscale.com/kb/1223/funnel">here.</a></li>
<li>and funnel the needed videos directory path
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tailscale funnel --bg <span class="s2">&#34;~/videos&#34;</span>
</span></span></code></pre></div>and also the port where app is living (HTTPS port)
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">tailscale funnel --https <span class="m">10000</span> https+insecure://127.0.0.1:5001
</span></span></code></pre></div></li>
</ol>
<h4 id="make-facebookmeta-app">Make Facebook/Meta app<a href="#make-facebookmeta-app" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<ol>
<li>for this go over to <a href="https://developers.facebook.com/">Facebook for developer website</a> and sign up.</li>
<li>make and <a href="https://developers.facebook.com/apps/">app</a>
<ul>
<li>name it and enter your E-mal.</li>
<li>is use case chouse <code>other</code>.</li>
<li>app type <code>business</code>.</li>
<li>then add product <code>Instagram</code></li>
<li>go over to the <code>API Setup with Instagram login</code></li>
<li>and add an account or accounts that will be posting from App roles -&gt; Roles -&gt; Add people. and sent a invitation as <code>Instagram tester</code> with username (account needs to be converted as creator). then on that account accept invitation from profile -&gt; gear icon -&gt; apps and websites -&gt; tester Invites and accept</li>
<li>now generate access token on <code>Instagram</code> -&gt; <code>API Setup with Instagram login</code> page click on generate token on each account and save them for latter. (tip: sometimes it will give error after login if account is recently added so wait for like a hour or two and then retry)</li>
<li>also whichever account you will be using as admin account( meaning messaging reels) enable webhooks for that account</li>
<li>for the configure webhooks as callback URL enter whatever Tailscale funnel gave you (Link) and add <code>/webhook/instagram</code> at the end.</li>
<li>for <code>verify token</code> this is like a password for webhook for verification so enter something save and save that for later too.</li>
<li>also here subscribe to messages.</li>
<li>and after app is running hit <code>verify and save</code> (at tis point this is not ready).</li>
</ul>
</li>
</ol>
<ul>
<li>also set the <code>App Mode</code> to <code>Live</code></li>
</ul>
<h4 id="make-env-file">make <code>.env</code> file<a href="#make-env-file" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>in the cloned repo add <code>.env</code> file and configure it as needed. in the repo there is example <code>.env</code> file and just copy that and replace descriptions with actual things. there is more info about them [[Instaswarm#.ENV guide]]</p>
<h4 id="running-the-app">Running the app<a href="#running-the-app" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
<p>app does comes with <code>compose.yaml</code> file you can either run that after changing the video directory:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose up -d
</span></span></code></pre></div><p>or run with Dockerfile directly:</p>
<ul>
<li>build
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo docker build .
</span></span></code></pre></div></li>
<li>run
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo docker run --rm --env-file .env -v ~/opt/videos:/app/video -p 5000:8080 -p 5001:8081 --name Instaswarm &lt;last container id from build command&gt;
</span></span></code></pre></div></li>
</ul>
<p>you can of course tweak this.</p>
<h2 id="how-does-it-works-on-user-side">How does it works on user side<a href="#how-does-it-works-on-user-side" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Once app is running and is configured, when you or admin user sends a reel to the admin bot it will get that Reel and then reupload that reel to all accounts it manages.</p>
<h2 id="env-guide">.ENV guide<a href="#env-guide" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>in this project environmental variables are most important thin for app to work for other individuals. <code>.env.example</code> is the example file and this is what it contains:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">INSTAGRAM_USER_TOKENS</span><span class="o">=</span>IGJHHTDMHNBVMHY, more...	 
</span></span><span class="line"><span class="cl"><span class="nv">YTDLP_PATH</span><span class="o">=</span>
</span></span><span class="line"><span class="cl"><span class="nv">VIDEO_DOWNLOAD_PATH</span><span class="o">=</span>./video
</span></span><span class="line"><span class="cl"><span class="nv">HTTPS_CERT_PASSWORD</span><span class="o">=</span>pass123
</span></span><span class="line"><span class="cl"><span class="nv">PUBLIC_BASE_URL</span><span class="o">=</span>https://test.taile6d42d.ts.net/
</span></span><span class="line"><span class="cl"><span class="nv">WEBHOOKK_VERIFY_TOKEN</span><span class="o">=</span>VERIFY_TOKEN
</span></span><span class="line"><span class="cl"><span class="nv">ADMIN_INSTAGRAM_USER_ID</span><span class="o">=</span><span class="m">12456789</span>
</span></span></code></pre></div><ol>
<li><code>INSTAGRAM_USER_TOKEN</code> is Instagram users token from meta app dashboard and it is used for fetching data about user and also for uploading on their profile. in the future there will be many like this for clustering like <code>INSTAGRAM_USER_TOKEN_1</code>, <code>INSTAGRAM_USER_TOKEN_2</code> or <code>INSTAGRAM_USER_TOKEN_ADMIN</code> and such.</li>
<li><code>YTDLP_PATH</code> this is the path where your <code>Yt-dlp</code> tool executable is located at. since container OS is Linux and <code>.exe</code> don&rsquo;t work once Dockerfile downloads the tool it also makes a link from its binary and exe file in the app directory:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ln -s /usr/local/bin/yt-dlp /app/yt-dlp.exe
</span></span></code></pre></div>so no need for <code>yt-dlp</code> path if this is not edited and everything is &lsquo;stock&rsquo;.</li>
<li><code>VIDEO_DOWNLOAD_PATH</code> is a path where the apps will be downloaded in. by default this is set to the <code>./video</code> folder inside the <code>app</code> directory and is also  a volume for Tailscale to host on host machine set this as default too but the Tailscale could be moved into a container in the future. if you need to change the destination path you will also need to edit volumes and folder creation in the Dockerfile.</li>
<li><code>HTTPS_CERT_PASSWORD</code> is a password for your HTTPS Dev certificate creatin that is explained in [[Instaswarm#make your own HTTPS certificate]] without this on Linux  HTTPS won&rsquo;t work and that is required for Instagram webhook to work.</li>
<li><code>PUBLIC_BASE_URL</code> is from Tailscale so when you funnel the app what URL is it accessible on (Eg.<code>https://test.taile6d42d.ts.net/</code>) so a
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">HTTPS://<span class="o">{</span>MACHINE_NAME<span class="o">}</span>.<span class="o">{</span>TAILNET_NAME<span class="o">}</span>.ts.ent/
</span></span></code></pre></div><strong>it must have a slash at the end</strong>
this could be fount in Tailscale admin console. also for testing you could just funnel something and it will output URL like this and end the funnel.</li>
<li><code>WEBHOOKK_VERIFY_TOKEN</code> is a token that is used for verifying the webhook. so once you set it in the <code>.env</code> file it also will be used in meta dashboard.</li>
<li><code>ADMIN_INSTAGRAM_USER_ID</code> is and id of an user where app accepts messages from, at first you can set this to <code>2123123</code> or something and then send the message to account and check the webhook in the logs with:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker logs &lt;container name&gt;
</span></span></code></pre></div></li>
</ol>
<h2 id="make-your-own-https-certificate">Make your own HTTPS certificate<a href="#make-your-own-https-certificate" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>according to <a href="https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-dev-certs">this</a>  dotnet can make the https certificate but if you don&rsquo;t have it run a container that app uses to run like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run --rm -v <span class="s2">&#34;~/opt/certs:/output&#34;</span> mcr.microsoft.com/dotnet/sdk:8.0 bash -c <span class="s2">&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">¬† dotnet dev-certs https --export-path /output/https-dev.pfx --password &#39;&lt;your strong password&gt;&#39; &amp;&amp;
</span></span></span><span class="line"><span class="cl"><span class="s2">¬† chown 1000:1000 /output/https-dev.pfx &amp;&amp;
</span></span></span><span class="line"><span class="cl"><span class="s2">¬† chmod 644 /output/https-dev.pfx
</span></span></span><span class="line"><span class="cl"><span class="s2">&#34;</span>
</span></span></code></pre></div><p>replace the password and after running this it will make HTTPS certificate in ~/opt/certs directory i thing you can also enter the working directory here too and that will work too.
after that move that certificate to the app redirect and enter password in <code>.env</code> file</p>
]]></content>
		</item>
		
		<item>
			<title>Super-Spork</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/super-spork/</link>
			<pubDate>Fri, 01 Aug 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/super-spork/</guid>
			<description><![CDATA[this is a readme file for my project &#34;super-spork&#34; on github]]></description><content type="text/html" mode="escaped"><![CDATA[<p><a href="https://github.com/demetrebadzaradze/super-spork">https://github.com/demetrebadzaradze/super-spork</a></p>
<h2 id="super-spork">Super-Spork<a href="#super-spork" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>This project provides a bot that forwards text messages from Mumble server running in the docker with compose (version 1.5.735) to a Discord server. it is not a plug and play like just adding the bot to Discord and be done. it is more of making your own discord bot and running this project as docker to use the bot as a one way bridge for now.</p>
<p>this is very bare bone project as you can tell and will improve lattes if gets any users.</p>
<h2 id="features">Features<a href="#features" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>
<p>Mumble-to-Discord: Forwards messages from Mumble channels to a Discord channel, including the sender&rsquo;s name and channel name (e.g., <strong>TG_3W3p</strong> in <strong>Minecraft</strong>: Hello from Mumble!).</p>
</li>
<li>
<p>Basic Discord Commands: Responds to simple commands like ?hello or hi with responses like <code>yooooo</code> or <code>whats</code> up (via the responce.py cog), and can gamble too.</p>
</li>
</ul>
<h2 id="prerequisites">Prerequisites<a href="#prerequisites" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>System: Ubuntu 24.04.1 LTS (or compatible Linux distribution), but since it runs in the docker you could make it work anywhere.</li>
<li>Docker: Docker and Docker Compose installed (<code>sudo apt install docker.io docker-compose</code>).</li>
<li>Mumble Server: Version 1.5.735 running in a Docker container.</li>
<li>Python: Version 3.12 (included in the bot&rsquo;s Docker image).</li>
<li>Dependencies: Listed in requirements.txt (e.g., <code>discord.py</code>, <code>zeroc-ice</code> for Ice communication).</li>
<li>Discord Bot Token: create your own discord bot and Obtain its token from the Discord Developer Portal.</li>
<li>Mumble Ice Password: this should be same as <code>MUMBLE_CONFIG_SERVERPASSWORD</code> from mumble server.</li>
<li>Discord Channel ID: The ID of the Discord channel where Mumble messages are forwarded (e.g., <code>1349705376263418589</code>).</li>
</ul>
<h2 id="setup-instructions">Setup Instructions<a href="#setup-instructions" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Directory Structure should look like this</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-plain" data-lang="plain"><span class="line"><span class="cl">‚îú‚îÄ‚îÄ .env (same file as in super-spork)
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ docker-compose.yml
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ data/
</span></span><span class="line"><span class="cl">‚îú‚îÄ‚îÄ logs/
</span></span><span class="line"><span class="cl">‚îî‚îÄ‚îÄ super-spork/
</span></span><span class="line"><span class="cl">¬† ¬† ‚îú‚îÄ‚îÄ .env
</span></span><span class="line"><span class="cl">¬† ¬† ‚îú‚îÄ‚îÄ cogs/
</span></span><span class="line"><span class="cl">¬† ¬† ‚îÇ ¬† ‚îú‚îÄ‚îÄ mumble.py
</span></span><span class="line"><span class="cl">¬† ¬† ‚îÇ ¬† ‚îú‚îÄ‚îÄ responce.py
</span></span><span class="line"><span class="cl">¬† ¬† ‚îú‚îÄ‚îÄ Dockerfile
</span></span><span class="line"><span class="cl">¬† ¬† ‚îú‚îÄ‚îÄ MumbleServer_ice.py
</span></span><span class="line"><span class="cl">¬† ¬† ‚îú‚îÄ‚îÄ main.py
</span></span><span class="line"><span class="cl">¬† ¬† ‚îî‚îÄ‚îÄ requirements.txt
</span></span></code></pre></div><p>for that:</p>
<ol>
<li>clone the <code>super-spork</code> directory where ¬†mumble server compose file is. go to the correct directory(e.g. <code>cd /mnt/silver-64/opt/mumble/</code>) and clone the repo</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">	¬† git clone https://github.com/demetrebadzaradze/super-spork.git
</span></span></code></pre></div><ol start="2">
<li>
<p><strong>make a discord bot</strong>
¬† 1. go to <a href="https://discord.com/developers/applications">discord developer portal</a>
¬† 2. create new application and give it a name
¬† 3. configure it as you would like in general (e.g. add a picture, description, etc.)
¬† 4. go over in the <code>bot</code> section and note the bot token (reset if not present)
¬† 5. then add the bot to the server with a <a href="https://discordjs.guide/preparations/adding-your-bot-to-servers.html#creating-and-using-your-invite-link">generated link,</a>   for permeations it should work with:
¬† <code>View Channels</code>, <code>Send Messages</code> , <code>Manage Messages</code>, <code>Read Message History</code>.
¬† I checked <code>admin</code> witch is not recommended but it works if you cant get it working other way.  and also you can send this link to owner of another server and they could add it to server that you don&rsquo;t own.</p>
</li>
<li>
<p><strong>Configure the Mumble Server</strong>
Ensure the Mumble server is running in a Docker container with Ice enabled:
**template <code>compose.yml</code> file for <code>mumbe</code> server and <code>super-spork</code> bot **</p>
</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mumble-server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mumblevoip/mumble-server:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">mumble-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;replace this with your hostname&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="m">64738</span><span class="p">:</span><span class="m">64738</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="m">64738</span><span class="p">:</span><span class="m">64738</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="m">6502</span><span class="p">:</span><span class="m">6502</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">./data/:/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_CONFIG_WELCOMETEXT</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;replace this with your welcome text&gt; </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_CONFIG_PORT</span><span class="p">:</span><span class="w"> </span><span class="m">64738</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_CONFIG_USERS</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;replace this with max users for server&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_CONFIG_ICE</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;tcp -h 0.0.0.0 -p 6502&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_CONFIG_SERVERPASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;replace this with your server password witch will be also needed in .env file&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">MUMBLE_SUPERUSER_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="l">&lt;replace this with your SuperUser password&gt;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">expose</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="m">6502</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">mumble-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">super-spork-bot</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">build</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">context</span><span class="p">:</span><span class="w"> </span><span class="l">./super-spork/.</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span><span class="nt">dockerfile</span><span class="p">:</span><span class="w"> </span><span class="l">Dockerfile</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">super-spork-bot</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">TOKEN=${TOKEN}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">DISCORD_CHANNEL_ID=${DISCORD_CHANNEL_ID}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">MUMBLE_ICE_PASSWORD=${MUMBLE_ICE_PASSWORD}</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">./super-spork:/app</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">./logs:/app/logs</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">depends_on</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">mumble-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">            </span>- <span class="l">mumble-network</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">networks</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">mumble-network</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">        </span><span class="nt">driver</span><span class="p">:</span><span class="w"> </span><span class="l">bridge</span><span class="w">
</span></span></span></code></pre></div><ol start="4">
<li><strong>configure <code>.env</code> file</strong>
¬† this env file should be in the <code>super-spork</code> directory and where <code>compose.yml</code> file is and this is how it should look like: (replace descriptions in quotes with actual values)</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl">	¬† <span class="nv">TOKEN</span><span class="o">=</span><span class="s2">&#34;this should be set to your discord bot&#39;s token&#34;</span>
</span></span><span class="line"><span class="cl">	¬† <span class="nv">DISCORD_CHANNEL_ID</span><span class="o">=</span><span class="s2">&#34;id of a channel where messages will be sent bot should be added in that server too&#34;</span>
</span></span><span class="line"><span class="cl">	¬† <span class="nv">MUMBLE_ICE_PASSWORD</span><span class="o">=</span><span class="s2">&#34;whatever is configured as MUMBLE_CONFIG_SERVERPASSWORD in mumble configuration&#34;</span>
</span></span></code></pre></div><ol start="5">
<li><strong>Build and run the container</strong>
go to directory where <code>compose.yml</code> file is and run:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo docker compose up --build
</span></span></code></pre></div>use <code>-d</code> for detached mode.</li>
<li><strong>Test</strong>
when any message is sent in the <code>mumble</code> text chat it will also be send in the <code>discord</code> channel like this :</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-markdown" data-lang="markdown"><span class="line"><span class="cl">**TG_3W3p** in <span class="gs">**Minecraft**</span>: hello world
</span></span></code></pre></div><h2 id="contributing">Contributing<a href="#contributing" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>Add new features by creating cogs in super-spork/cogs/ and updating main.py.</li>
<li>Report issues or suggest improvements by modifying the code.</li>
</ul>
<h2 id="license">License<a href="#license" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>This project is licensed under the MIT License. See the LICENSE file for details.</p>
]]></content>
		</item>
		
		<item>
			<title>Rooting a TV Box via UART and Arduino</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/rooting-a-tv-box-via-uart-and-arduino/</link>
			<pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/rooting-a-tv-box-via-uart-and-arduino/</guid>
			<description><![CDATA[A deep dive into hacking a cheap DVB-T2 set-top box using UART and an Arduino board to unlock hidden firmware access. so how i got this idea is i found this at my grandparents house and thought nothing of it until i took it apart looked like a very weak redberry pi]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="background">Background<a href="#background" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>This post documents how I explored rooting a <strong>TV Star HD Digital DVB-T2/T model T2 535M HD</strong> using UART serial access. This box runs on a mysterious <strong>MStar MSD7T01-Z00-NA0</strong> chip, likely a MIPS-based SoC used in budget digital TV devices. Here&rsquo;s how I uncovered the internals, accessed the UART shell, and what I learned along the way.</p>
<hr>
<h2 id="step-1-disassembly--finding-the-uart-pins">Step 1: Disassembly &amp; Finding the UART Pins<a href="#step-1-disassembly--finding-the-uart-pins" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Upon opening the box, I inspected the motherboard and identified a 4-pin header likely corresponding to UART (GND, TX, RX, VCC). With some probing and research, I was able to identify the UART pinout. UART is the debug serial interface often left by manufacturers for development.</p>
<hr>
<h2 id="step-2-connecting-via-arduino-as-a-serial-adapter">Step 2: Connecting via Arduino (as a Serial Adapter)<a href="#step-2-connecting-via-arduino-as-a-serial-adapter" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>I didn‚Äôt have a USB-to-TTL adapter, so I used a <strong>clone Arduino Uno</strong> as a USB-to-serial bridge.</p>
<h3 id="-wiring">üîå Wiring:<a href="#-wiring" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<table>
  <thead>
      <tr>
          <th>TV Box UART</th>
          <th>Arduino Pin</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td>TX</td>
          <td>Pin 0 (RX)</td>
      </tr>
      <tr>
          <td>RX</td>
          <td>Pin 1 (TX)</td>
      </tr>
      <tr>
          <td>GND</td>
          <td>GND</td>
      </tr>
  </tbody>
</table>
<p>‚ö†Ô∏è Note: Arduino&rsquo;s TX is 5V, so use a voltage divider to step it down to 3.3V to avoid damaging the TV box but mine was working at 5-12v so it was alright.</p>
<hr>
<h2 id="step-3-serial-communication-troubleshooting">Step 3: Serial Communication Troubleshooting<a href="#step-3-serial-communication-troubleshooting" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>I tested the Arduino‚Äôs hardware serial using a simple loopback sketch:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-C++" data-lang="C++"><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="n">begin</span><span class="p">(</span><span class="mi">9600</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="n">Serial</span><span class="p">.</span><span class="n">println</span><span class="p">(</span><span class="s">&#34;Bridge started&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kt">void</span> <span class="nf">loop</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">if</span> <span class="p">(</span><span class="n">Serial</span><span class="p">.</span><span class="n">available</span><span class="p">())</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">Serial</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
</span></span><span class="line"><span class="cl">    <span class="n">Serial</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">c</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>After confirming it worked, but to fully utilize RX and TX pins i had to disable the main chip on the Arduino on regular one you just take out the atmega chip but on mine i had to shorten reset and ground pins  then I connected it to the TV box and launched <strong>PuTTY</strong> at <code>115200</code> baud (bc i tested the other bauds but this was where i would get the output), right serial port 3 in my case, no flow control, parity none, stop bits 1 and data bits 8.</p>
<hr>
<h2 id="step-4-catching-the-u-boot-shell">Step 4: Catching the U-Boot Shell<a href="#step-4-catching-the-u-boot-shell" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>The TV box booted and printed debug logs:</p>
<pre tabindex="0"><code>BOOTSPI
BIST0_OK
_OK!decomp
_done
done

Hello U-Boot

U-Boot 1.1.6 (Mar 18 2015 - 21:31:58)
...
Hit any key to stop autoboot: 0
</code></pre><p>By rapidly pressing keys (or shorting TX/RX during boot that what worked for me), I eventually landed in the U-Boot prompt:</p>
<pre tabindex="0"><code>&lt;&lt; MStar &gt;&gt;#
</code></pre><p>&ldquo;I typed <code>help</code> and confirmed command execution was working!&rdquo; is what i would have said if something didn&rsquo;t go wrong and wouldn&rsquo;t you guess it it was that clone Arduino board turns  out the RX and TX fins were &ldquo;broken&rdquo; i would get the output but i couldn&rsquo;t input anything that&rsquo;s why shorting the pins worked as an input. i could write some  script to get the input on another pins and make they act as the TX and RX but this already took sleepiness night soo i will end it here until i get a proper adapter.</p>
]]></content>
		</item>
		
		<item>
			<title>Self-Hosted Mumble Voice Server with Docker, Lightweight Discord Alternative</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/self-hosted-mumble-voice-server-with-docker-lightweight-discord-alternative/</link>
			<pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/self-hosted-mumble-voice-server-with-docker-lightweight-discord-alternative/</guid>
			<description><![CDATA[so as of many other blog description i hade a problem, my friend wanted to play some games but his internet is so bad that discord and Minecraft would take up all the bandwidth, witch he found out while experimenting. so i got on it and fount this thing called mumble, self hosted discord but extremely lightweight, here i will be setting that up.]]></description><content type="text/html" mode="escaped"><![CDATA[<p>Mumble is an open-source, low-latency voice chat system that&rsquo;s perfect for gaming and bad networks. Here&rsquo;s how I deployed it using Docker, plus some fun and useful ways to customize it!</p>
<hr>
<h2 id="-setting-up-mumble-in-docker">üê≥ Setting Up Mumble in Docker<a href="#-setting-up-mumble-in-docker" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>all of this will be done with docker compose because it the best thing ever.</p>
<p>Here&rsquo;s our simple <code>docker-compose.yml</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">mumble-server</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">mumblevoip/mumble-server:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">mumble-server</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">hostname</span><span class="p">:</span><span class="w"> </span><span class="l">TG_3w3p</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="kc">on</span>-<span class="l">failure</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">64738</span><span class="p">:</span><span class="m">64738</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">64738</span><span class="p">:</span><span class="m">64738</span><span class="l">/udp</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">./data/:/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MUMBLE_CONFIG_WELCOMETEXT</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&lt;b&gt;Welcome to TG_3w3p&#39;s Mumble!&lt;/b&gt;&lt;br /&gt;Have fun.&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MUMBLE_CONFIG_PORT</span><span class="p">:</span><span class="w"> </span><span class="m">64738</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MUMBLE_CONFIG_USERS</span><span class="p">:</span><span class="w"> </span><span class="m">10</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MUMBLE_CONFIG_SERVERPASSWORD</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;password&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="nt">MUMBLE_SUPERUSER_PASSWORD</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;admin&#34;</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span><span class="l">```</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">This runs the official Mumble server image and exposes the necessary ports for voice traffic. All configuration is handled via environment variables or through the mumble_server_config.ini file in ./data. you can see more on this [here](https://github.com/mumble-voip/mumble-docker), documentation is kind of all over soo this is  great start. </span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">so just run that with </span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">```bash</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="l">sudo docker compose up -d</span><span class="w">
</span></span></span></code></pre></div><p>or no <code>-d</code> if you want to look at it</p>
<hr>
<h2 id="-persistent-data">üìÅ Persistent Data<a href="#-persistent-data" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>The <code>./data</code> folder stores:</p>
<ul>
<li><code>mumble_server_config.ini</code>: Your config file</li>
<li><code>mumble-server.sqlite</code>: Database for channels, users, etc.</li>
</ul>
<p>Edit the config manually or let Docker handle it via environment variables.
but in case of editing it manually for me it gets overridden by env variables even if i don&rsquo;t have them configured so add this in the compose file:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl"><span class="nt">command</span><span class="p">:</span><span class="w"> </span><span class="l">/usr/bin/mumble-server -fg -ini /data/mumble_server_config.ini</span><span class="w">
</span></span></span></code></pre></div><p>and this should work but i will stick to the env variables in the compose file.</p>
<hr>
<h2 id="-connect-to-the-server">‚úÖ Connect to the Server<a href="#-connect-to-the-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Use the <a href="https://www.mumble.info/">Mumble client</a> and connect using:</p>
<ul>
<li>Address: your public IP, LAN IP, or Tailscale IP</li>
<li>Port: 64738</li>
<li>Username: anything you want</li>
<li>Password: password
for me i don&rsquo;t really  have a public IP address but what i have is <a href="https://tailscale.com/">Tailscale</a> VPN and all i did wat to just share out my server or the device that has <code>mumble</code> hosted and they will just use may Tailnet IP and done.</li>
</ul>
<hr>
<h2 id="-custom-banner--welcome-message">üìú Custom Banner / Welcome Message<a href="#-custom-banner--welcome-message" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Mumble supports rich HTML in the welcome message:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl">MUMBLE_CONFIG_WELCOMETEXT: <span class="p">|</span>
</span></span><span class="line"><span class="cl">  &lt;center&gt;&lt;b&gt;üî• Welcome to TG_3w3p<span class="err">&#39;</span>s Mumble üî•&lt;/b&gt;&lt;br/&gt;
</span></span><span class="line"><span class="cl">  &lt;img <span class="nv">src</span><span class="o">=</span>&lt;link&gt; <span class="nv">height</span><span class="o">=</span><span class="s2">&#34;100&#34;</span>/&gt;&lt;br/&gt;
</span></span><span class="line"><span class="cl">  Join <span class="c1">#Gaming or #Chill rooms to start!&lt;/center&gt;</span>
</span></span></code></pre></div><p>and whatever image is on the link will be displayed.</p>
<hr>
<h2 id="login-as-superuser">login as <code>SuperUser</code><a href="#login-as-superuser" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>in the environmental variables we have set the <code>SuperUser</code> password witch as the name suggests is like an admin to connect to the server with that, in <code>username</code> field you must enter <code>SuperUser</code> and this will prompt you to enter super user password that you set in the compose file and you are in.
once you are a super user you can then manage channels and whatnot</p>
<hr>
<h2 id="-ideas-for-the-future">üí° Ideas for the Future<a href="#-ideas-for-the-future" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>add some bots ‚Äî a channel where no one has voice permission üòÑ</li>
<li>Game event channels with custom join sounds</li>
<li>and it has an API witch can do a lot of things but i won&rsquo;t be using that</li>
</ul>
<hr>
<h2 id="-final-thoughts">‚úÖ Final Thoughts<a href="#-final-thoughts" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Mumble is an amazing tool ‚Äî even more so when self-hosted. It&rsquo;s fast, secure, light on resources, and perfect for friends with weak internet who still want to game and chat. With Docker, the setup is incredibly simple, and customization possibilities are endless and add on Tailscale and it can be hosted on anywhere. of course you could make it public but i didn&rsquo;t since it for me and friends but in future i guess</p>
<p>If you&rsquo;re tired of Discord hogging your bandwidth or just want full control, give Mumble a shot!</p>
]]></content>
		</item>
		
		<item>
			<title>Recovering corrupted USB drive</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/recovering-corrupted-usb-drive/</link>
			<pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/recovering-corrupted-usb-drive/</guid>
			<description><![CDATA[I have an USB drive that my friend gave me it is 64 GB drive and USB 2.0 so so nothing crazy but solid. I tested it with validrive and it was pretty slow but truly 64 GB and no error. little did i knew i would have quite some time with it. at first i wanted to mount it on my server but formatting it as FAT32 NTFS or exFAT would not work i would get some errors and nothing else, so i went  with F2FS witch is format made for flash storage and support for it is not much but whatever it worked fine for holding media for my Jellyfin media server until it just started giving I/O error and now i will try to fix.]]></description><content type="text/html" mode="escaped"><![CDATA[<blockquote>
<p><strong>WARNING</strong>: STOP USING THE DRIVE IMMEDIATELY IN CASE OF CORRUPTION</p>
</blockquote>
<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li>since working with <a href="https://docs.kernel.org/filesystems/f2fs.html">F2FS</a>(Flash-Friendly File System) Linux is more feasible since it&rsquo;s is supported on there and these tools that i will use are on Linux and are free. for this i will setup a VM(virtual machine) with kali (iso i have but any will do). the tools used here support other popular formats too.</li>
<li>download tools or a tool <a href="https://www.cgsecurity.org/wiki/TestDisk"><code>testdisk</code></a> witch also comes with <a href="https://www.cgsecurity.org/wiki/PhotoRec"><code>photorec</code></a>. powerful and free tools for recovering data.</li>
<li>backup the disk image of that corrupted drive so if we screw something up we have a backup or do the recovering on the image while drive is being fixed, but i will be saving that compressed so i wont have to use that much storage.</li>
<li>using the tools downloaded, recover the data.</li>
</ol>
<blockquote>
<p><strong><em>NOTE:</em></strong>  if using a VM allocate more then the drive size, for making a backup and recover files allocate double the size of drive you want to recover to make sure you have enough space and wont have to restart 4 times (speaking from experience). for copying on another drive and recovering just Linux plus some space for swap and programs is good enough.</p>
</blockquote>
<h2 id="backup-the-raw-data-of-the-driveoptional-but-recommended">Backup the raw data of the drive(optional but recommended)<a href="#backup-the-raw-data-of-the-driveoptional-but-recommended" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>plug in the USB drive or the device you are recovering and do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">lsblk
</span></span></code></pre></div><p>this lists out all the storage devices accessible(should not be mounted and sizes of drive are sometimes different than what they are branded as). find the one needed and like <code>sdb</code> in my case and run the disk image creation command with <code>dd</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dd <span class="k">if</span><span class="o">=</span>/dev/sdb <span class="nv">of</span><span class="o">=</span>/home/user/backup.img <span class="nv">status</span><span class="o">=</span>progress
</span></span></code></pre></div><p>replace <code>sdb</code> and destination on the backup disk image file according to your needs and if you want to compress it run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dd <span class="k">if</span><span class="o">=</span>/dev/sdb <span class="nv">status</span><span class="o">=</span>progress <span class="p">|</span> gzip -c &gt; /home/user/backup.img.gz
</span></span></code></pre></div><p>again  fill in the <code>sdb</code> and path for file. destination should have enough.</p>
<h2 id="download-tool">Download tool<a href="#download-tool" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>the tool is <code>testdisk</code> soo:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install -y testdisk
</span></span></code></pre></div><p>and doing this this will also downloads the <code>photorec</code>.</p>
<h2 id="recover-data">Recover data<a href="#recover-data" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>i will be using <code>photorec</code> so just run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo photorec
</span></span></code></pre></div><ol>
<li>chouse the correct drive(must be plugged in at this point).</li>
<li>an then select partition and hot search this will take some time, i waited for 5 hours for 64 GB drive but it will be different for different environments.</li>
<li>after it finishes you should have some directories named:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">recup_dir.1
</span></span><span class="line"><span class="cl">recup_dir.2
</span></span><span class="line"><span class="cl">recup_dir.3
</span></span></code></pre></div>these are recovered files and <code>photorec</code> doesn&rsquo;t keeps the folder structure or any names. soo that is on you to fix manually but there are some other ways I&rsquo;m sure but i want to see what is going on in the there.</li>
</ol>
<h3 id="if-you-want-to-recover-from-image">if you want to recover from image<a href="#if-you-want-to-recover-from-image" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>do:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo photorec /home/user/backup.img
</span></span></code></pre></div><p>edit path to the drive image wit was dove with [[Recovering corrupted USB drive#Backup the raw data of the drive(optional but recommended)]].</p>
<h3 id="if-its-image-file-is-compressed">if its image file is compressed<a href="#if-its-image-file-is-compressed" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>decompress it first with <code>gunzip</code> first and than start <code>photorec</code>:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gunzip /home/user/backup.img.gz
</span></span></code></pre></div><p>enter correct path to file.</p>
<h2 id="write-back-the-image-to-the-drive-if-wanted">Write back the image to the drive (if wanted)<a href="#write-back-the-image-to-the-drive-if-wanted" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<blockquote>
<p><strong><em>NOTE</em></strong>:  the image will be same so it contains corrupted data</p>
</blockquote>
<p>done with <code>dd</code> command once again run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo dd <span class="k">if</span><span class="o">=</span>/home/user/backup.img <span class="nv">of</span><span class="o">=</span>/dev/sdb <span class="nv">bs</span><span class="o">=</span>4M <span class="nv">status</span><span class="o">=</span>progress
</span></span></code></pre></div><ul>
<li><code>if=/home/user/backup.img</code>: Path to your backup image.</li>
<li><code>of=/dev/sdb</code>: The thumb drive‚Äôs device name (not a partition like <code>/dev/sdb1</code>).</li>
<li><code>bs=4M</code>: Block size for faster transfer.
if image is compressed run:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">gunzip -c /home/user/backup.img.gz <span class="p">|</span> sudo dd <span class="nv">of</span><span class="o">=</span>/dev/sdb <span class="nv">bs</span><span class="o">=</span>4M <span class="nv">status</span><span class="o">=</span>progress
</span></span></code></pre></div><ul>
<li><code>gunzip -c </code> : decompresses the image and pipes it to <code>dd</code>.</li>
</ul>
<h2 id="fixing-the-usb">Fixing the USB<a href="#fixing-the-usb" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>i will still be using the <code>F2FS</code> format for this but you are welcome to chouse any that you would like.</p>
<p>so lets try to fix it by installing the tools for this format:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install f2fs-tools
</span></span></code></pre></div><p>and then try to fix it by:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo fsck.f2fs /dev/sdb1
</span></span></code></pre></div><p>change the path accordingly and again use <code>lsblk</code> to identify it.</p>
<p>in my case fixing it like this didn&rsquo;t work so i will just reformat it:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo fsck.f2fs /dev/sdb
</span></span></code></pre></div><p>this will delete all data on there but then i will just move recovered files on there and its done.</p>
<h3 id="testing-usb">Testing USB<a href="#testing-usb" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>make a folder in <code>/mnt</code> directory and mount it on there:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo mkdir /mnt/thumb
</span></span><span class="line"><span class="cl">sudo mount /dev/sdb /mnt/thumb
</span></span></code></pre></div><p>and this should give no errors and we should be able to read and write on that path and also once we unmount/disconnect all should disappear.</p>
]]></content>
		</item>
		
		<item>
			<title>fun git procedure</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/fun-git-procedure/</link>
			<pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/fun-git-procedure/</guid>
			<description><![CDATA[see history of git and what it actually means.]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="fun-git-procedure">fun git procedure<a href="#fun-git-procedure" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>clone the git repo (might take a While)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone https://github.com/git/git.git
</span></span></code></pre></div><p>get into it  and check it out. it the same one on the <a href="https://github.com/git/git">git on Github</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> git
</span></span><span class="line"><span class="cl">ls
</span></span></code></pre></div><p>see the most important commits or the starting points of git</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git rev-list --max-parents<span class="o">=</span><span class="m">0</span> HEAD
</span></span></code></pre></div><p>get the last one witch is actually the first one and checkout that commit</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git checkout e83c5163316f89bfbde7d9ab23ca2e25604af290
</span></span></code></pre></div><p>and see its legendary message from <a href="https://en.wikipedia.org/wiki/Linus_Torvalds">Linus Torvalds</a> the creator of Linux kernel and git from 2005</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git log
</span></span></code></pre></div><p>also see how small the project was back in a day and quick look at the README.md file and observe what creator describes his creation as</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">notepad README.md
</span></span></code></pre></div><p>or just <code>cat</code> it on Linux or <code>nano</code></p>
]]></content>
		</item>
		
		<item>
			<title>NextCloud setup</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/nextcloud-setup/</link>
			<pubDate>Tue, 18 Mar 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/nextcloud-setup/</guid>
			<description><![CDATA[Nextcloud is google drive if cloud was your server. at least thats wht i will be using for because i have a 500GB hardrive and im lacking storage on my devices.]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="what-is-nextcloud">What is NextCloud?<a href="#what-is-nextcloud" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><a href="https://nextcloud.com/">Nextcloud</a> is a opensource self hosted app for data storage and here i will be using it for my home server because i am running out of storage on my devices and i have this 500GB Hardrive that is not in use for now so this project solves many problems.</p>
<h2 id="plan">PLAN<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>follow this official <a href="https://github.com/nextcloud/all-in-one#nextcloud-all-in-one">repo</a> for docker installation(because docker is pure magic) and</p>
<h2 id="setup">Setup<a href="#setup" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>to get this app started make <code>compose.yml</code> file and fill in like this:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-yml" data-lang="yml"><span class="line"><span class="cl"><span class="nn">---</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w"></span><span class="nt">services</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">nextcloud</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">image</span><span class="p">:</span><span class="w"> </span><span class="l">lscr.io/linuxserver/nextcloud:latest</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">container_name</span><span class="p">:</span><span class="w"> </span><span class="l">nextcloud</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">environment</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PUID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">PGID=1000</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">TZ=Etc/UTC</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">volumes</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/path/to/nextcloud/config:/config</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="l">/path/to/data:/data</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">ports</span><span class="p">:</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">      </span>- <span class="m">443</span><span class="p">:</span><span class="m">443</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">    </span><span class="nt">restart</span><span class="p">:</span><span class="w"> </span><span class="l">unless-stopped</span><span class="w">
</span></span></span></code></pre></div><p>of course you can change the machine port and directories accordingly.</p>
<ul>
<li><code>data</code> is folder where all of the files and folders will be saved</li>
<li><code>config</code> is self explanatory</li>
<li><code>port</code> is the port on witch app  will be ran on.</li>
<li>change the <code>TZ</code> time zone</li>
<li>also change <code>puid</code> and <code>pgid</code> for your user. to check your ids type <code>id</code> in terminal
<a href="https://docs.linuxserver.io/images/docker-nextcloud/#parameters">more</a> for this step</li>
</ul>
<p>after that run</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo docker compose up -d
</span></span></code></pre></div><p>in a same directory as the compose file and after successful run üëáüëáüëá</p>
<h2 id="login">Login<a href="#login" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ol>
<li>go on that website it should be <code>https://&lt;ip-addres-or-name-of-host&gt;:&lt;port&gt;</code></li>
<li>make new admin account</li>
<li>and you are done.</li>
</ol>
<h2 id="more-things-you-can-do">more things you can do<a href="#more-things-you-can-do" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>I will use their phone app and and tailscale VPN for more accessibility.</p>
<h2 id="manually-installing-docker-compose">manually Installing docker compose<a href="#manually-installing-docker-compose" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>for server I need docker compose plugin. <a href="https://docs.docker.com/compose/install/linux/">here</a> is how to to install it but basically its:</p>
<ol>
<li>making a variable:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nv">DOCKER_CONFIG</span><span class="o">=</span><span class="si">${</span><span class="nv">DOCKER_CONFIG</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.docker</span><span class="si">}</span>
</span></span></code></pre></div><ol start="2">
<li>making a directory for installation:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir -p <span class="nv">$DOCKER_CONFIG</span>/cli-plugins
</span></span></code></pre></div><ol start="3">
<li>and getting the binary:</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">curl -SL https://github.com/docker/compose/releases/download/v2.34.0/docker-compose-linux-x86_64 -o <span class="nv">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
</span></span></code></pre></div><ol start="4">
<li>and executing it</li>
</ol>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">chmod +x <span class="nv">$DOCKER_CONFIG</span>/cli-plugins/docker-compose
</span></span></code></pre></div><p>so now I have docker compose as plugin:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker compose version
</span></span><span class="line"><span class="cl">Docker Compose version v2.34.0
</span></span></code></pre></div><p>but remember this is for the one user you are logged in as. for all users checkout <a href="https://docs.docker.com/compose/install/linux/">this</a></p>
]]></content>
		</item>
		
		<item>
			<title>Making a Discord Bot</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/making-a-discord-bot/</link>
			<pubDate>Thu, 13 Mar 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/making-a-discord-bot/</guid>
			<description><![CDATA[i have never made a discord bot but now i will be making simple hello word kind of bot and maybe next time ill integrate it to unofficial Aternos API to start and stop a server]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="warning">WARNING<a href="#warning" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>the hosting part of this article is not correct anymore</strong>. turns out pinging already ran project in riple doesn&rsquo;t stays on because IP that pings the server get blocked and it is possible to bypass it but that&rsquo;s not what I will be showing here.
But discord doesn&rsquo;t needs a publicly accessible server it could be behind CG-NAT, program on a PC or a any thing that is connected to a internet.</p>
<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>plan is to have in bot that can do:</p>
<ol>
<li>say something as many times, as user want (edit: bad idea)</li>
<li>say hello if someone says hello or hi</li>
<li>and maybe integrate  unofficial Aternos API to start and stop a server</li>
</ol>
<h2 id="create-a-bot">Create a bot<a href="#create-a-bot" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>first have some kind of testing server and also be an owner of it.</p>
<ol>
<li>Turn on ‚ÄúDeveloper mode‚Äù in your Discord account.</li>
<li>Click on ‚ÄúDiscord API‚Äù.</li>
<li>In the Developer portal, click on ‚ÄúApplications‚Äù. Log in again and then, back in the ‚ÄúApplications‚Äù menu, click on ‚ÄúNew Application‚Äù.</li>
<li>Name the bot and then click ‚ÄúCreate‚Äù.</li>
<li>Go to the ‚ÄúBot‚Äù menu and generate a token using ‚ÄúAdd Bot‚Äù.</li>
<li>Program your bot using the bot token and save the file.</li>
<li>Define other details for your bot under ‚ÄúGeneral Information‚Äù.</li>
<li>Click on ‚ÄúOAuth2‚Äù, activate ‚Äúbot‚Äù, set the permissions, and then click on ‚ÄúCopy‚Äù.</li>
<li>Select your server to add your bot to it.</li>
</ol>
<p>more detailed in <a href="https://www.ionos.com/digitalguide/server/know-how/creating-discord-bot/">here.</a></p>
<h2 id="code-side">Code side<a href="#code-side" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>fore code setup we need some libraries:
<code>discord</code>, <code>flask</code> and <code>python-dotenv</code></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip install discord
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip install python-dotenv
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">pip install flask 
</span></span></code></pre></div><h3 id="what-is-flask">what is flask<a href="#what-is-flask" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>flask is <strong>lightweight python framework</strong> for create web apps and API&rsquo;s more on them <a href="https://flask.palletsprojects.com/en/stable/">here</a>
we will be using it to pint the web interface with <a href="https://uptimerobot.com/">uptimerobot</a> witch is simple tool that will be pinging our server so it doesn&rsquo;t dies out .</p>
<h3 id="create-env-file">create <code>.env</code> file<a href="#create-env-file" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p><code>.env</code> is a file that is useful for containing sensitive information like API keys, for us that will be useful for <strong>saving your bot token witch can be found in bot section in discord developer platform</strong></p>
<p>more on <code>.env</code> file <a href="https://upsun.com/blog/what-is-env-file/">here.</a></p>
<p>make new file and name it:</p>
<pre tabindex="0"><code>.env
</code></pre><p>in that file save your bot token like a variable:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-env" data-lang="env"><span class="line"><span class="cl"><span class="nv">DISCORD_BOT_TOKEN</span><span class="o">=</span>&lt;your bot token&gt;
</span></span></code></pre></div><p>replace <code>&lt;your bot token&gt;</code> with your actual bot token and save the file.</p>
<h2 id="python-script">python script<a href="#python-script" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>make a <code>main.py</code> file with this content:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">Final</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">asyncio</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">dotenv</span> <span class="kn">import</span> <span class="n">load_dotenv</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">discord</span> <span class="kn">import</span> <span class="n">Intents</span><span class="p">,</span> <span class="n">Message</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">discord.ext</span> <span class="kn">import</span> <span class="n">commands</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">responce</span>  <span class="c1"># Assuming this is your custom response module</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
</span></span><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">threading</span> <span class="kn">import</span> <span class="n">Thread</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a Flask web server</span>
</span></span><span class="line"><span class="cl"><span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="vm">__name__</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Load environment variables</span>
</span></span><span class="line"><span class="cl"><span class="n">load_dotenv</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">TOKEN</span><span class="p">:</span> <span class="n">Final</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">getenv</span><span class="p">(</span><span class="s2">&#34;DISCORD_BOT_TOKEN&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Set up intents</span>
</span></span><span class="line"><span class="cl"><span class="n">intents</span><span class="p">:</span> <span class="n">Intents</span> <span class="o">=</span> <span class="n">Intents</span><span class="o">.</span><span class="n">default</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">intents</span><span class="o">.</span><span class="n">message_content</span> <span class="o">=</span> <span class="kc">True</span>  <span class="c1"># Required to read messages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Create a bot instance with a command prefix</span>
</span></span><span class="line"><span class="cl"><span class="n">bot</span> <span class="o">=</span> <span class="n">commands</span><span class="o">.</span><span class="n">Bot</span><span class="p">(</span><span class="n">command_prefix</span><span class="o">=</span><span class="s2">&#34;/&#34;</span><span class="p">,</span> <span class="n">intents</span><span class="o">=</span><span class="n">intents</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">Send_Message</span><span class="p">(</span><span class="n">message</span><span class="p">:</span> <span class="n">Message</span><span class="p">,</span> <span class="n">user_message</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kc">None</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="ow">not</span> <span class="n">user_message</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;Message is empty due to invalid setup&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">is_private</span> <span class="o">=</span> <span class="n">user_message</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;?&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">is_private</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">user_message</span> <span class="o">=</span> <span class="n">user_message</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>  <span class="c1"># Remove &#39;?&#39; from message</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">try</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">response</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">responce</span><span class="o">.</span><span class="n">responde</span><span class="p">(</span><span class="n">user_message</span><span class="p">)</span>  <span class="c1"># Get response from custom module</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">response</span> <span class="o">==</span> <span class="s1">&#39;exit&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">is_private</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">await</span> <span class="n">message</span><span class="o">.</span><span class="n">author</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>  <span class="c1"># Send private message</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="k">await</span> <span class="n">message</span><span class="o">.</span><span class="n">channel</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">response</span><span class="p">)</span>  <span class="c1"># Send public message</span>
</span></span><span class="line"><span class="cl">    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Event: Bot is ready</span>
</span></span><span class="line"><span class="cl"><span class="nd">@bot.event</span>
</span></span><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">on_ready</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="si">{</span><span class="n">bot</span><span class="o">.</span><span class="n">user</span><span class="si">}</span><span class="s2"> is online!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Event: Handle messages (Custom message responses)</span>
</span></span><span class="line"><span class="cl"><span class="nd">@bot.event</span>
</span></span><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">on_message</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="n">Message</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">msg</span><span class="o">.</span><span class="n">author</span> <span class="o">==</span> <span class="n">bot</span><span class="o">.</span><span class="n">user</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>  <span class="c1"># Ignore bot messages</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="n">username</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">author</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">content</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">channel</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">channel</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">&#39;[</span><span class="si">{</span><span class="n">channel</span><span class="si">}</span><span class="s1">] </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s1">: &#34;</span><span class="si">{</span><span class="n">content</span><span class="si">}</span><span class="s1">&#34;&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="n">Send_Message</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="n">bot</span><span class="o">.</span><span class="n">process_commands</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>  <span class="c1"># Ensure commands still work</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example Command: /hello</span>
</span></span><span class="line"><span class="cl"><span class="nd">@bot.command</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">hello</span><span class="p">(</span><span class="n">ctx</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s2">&#34;Hello! üëã&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@bot.command</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="k">async</span> <span class="k">def</span> <span class="nf">spam</span><span class="p">(</span><span class="n">ctx</span><span class="p">,</span> <span class="n">string</span><span class="p">:</span> <span class="nb">str</span> <span class="p">,</span><span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">x</span> <span class="o">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="n">ctx</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">await</span> <span class="n">asyncio</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nd">@app.route</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">home</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="s2">&#34;Bot is running!&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">run</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">app</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s1">&#39;0.0.0.0&#39;</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="mi">8080</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">keep_alive</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span> <span class="o">=</span> <span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">run</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">t</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">bot</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="n">TOKEN</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">&#34;__main__&#34;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">keep_alive</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="n">main</span><span class="p">()</span>
</span></span></code></pre></div><p>flask is just hosting a web server for us to ping.
of course code is not perfect nor good, but good for quickly scribed script, plus it works.
it does first two goals and for aternos starter that simple from now.
and also response module:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">choice</span><span class="p">,</span> <span class="n">randint</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">responde</span><span class="p">(</span><span class="n">usr_msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="s2">&#34;&#34;&#34;
</span></span></span><span class="line"><span class="cl"><span class="s2">    Generates a response based on the user&#39;s message.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Args:
</span></span></span><span class="line"><span class="cl"><span class="s2">        usr_msg (str): The message sent by the user.
</span></span></span><span class="line"><span class="cl"><span class="s2">
</span></span></span><span class="line"><span class="cl"><span class="s2">    Returns:
</span></span></span><span class="line"><span class="cl"><span class="s2">        str: The bot&#39;s response.
</span></span></span><span class="line"><span class="cl"><span class="s2">    &#34;&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">greetings</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;hi&#39;</span><span class="p">,</span> <span class="s1">&#39;hey&#39;</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">usr_msg</span> <span class="ow">in</span> <span class="n">greetings</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="n">choice</span><span class="p">([</span><span class="s1">&#39;hello&#39;</span><span class="p">,</span> <span class="s1">&#39;hi&#39;</span><span class="p">,</span> <span class="s1">&#39;heyy&#39;</span><span class="p">,</span> <span class="s1">&#39;yooooo&#39;</span><span class="p">,</span> <span class="s1">&#39;whats up&#39;</span><span class="p">])</span>  <span class="c1"># Random greeting response</span>
</span></span><span class="line"><span class="cl">    <span class="k">elif</span> <span class="n">usr_msg</span> <span class="o">==</span> <span class="s1">&#39;gamble&#39;</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;Your number is &#39;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>  <span class="c1"># Simulate rolling a dice (1-6)</span>
</span></span><span class="line"><span class="cl">    <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s1">&#39;exit&#39;</span>  <span class="c1"># If no valid command is recognized, return &#39;exit&#39;</span>
</span></span></code></pre></div><h2 id="hosting">Hosting<a href="#hosting" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>for hosting I am going to us <a href="https://replit.com/">riplit.</a> because its free for 3 projects and its pretty simple make an account and</p>
<ol>
<li>make new application choose python as template.</li>
<li>copy your setup(there is helpful AI that can help)</li>
<li>run the app and test it out.</li>
<li>while running it you should see webview in the tabs so copy its URL and setup the <a href="https://uptimerobot.com/">uptimerobot</a> with it .
and you are done make some better ones though.</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>crypto transactions with Solana API(solnet) in C#</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/crypto-transactions-with-solana-apisolnet-in-c-sharp/</link>
			<pubDate>Sat, 01 Feb 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/crypto-transactions-with-solana-apisolnet-in-c-sharp/</guid>
			<description><![CDATA[Im planing to use my solana token in web market app for transactions and walets and such.]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="heading"><a href="#heading" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
]]></content>
		</item>
		
		<item>
			<title>SSH into phone with termux</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/ssh-into-phone-with-termux/</link>
			<pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/ssh-into-phone-with-termux/</guid>
			<description><![CDATA[pretty simple setup, works in private network and such and phone doesn&#39;t needs to be rooted]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>have <a href="https://github.com/termux/termux-app">termux</a> on phone and we are going to get the IP, username and password and then run the server on termux and connect to if from phone.</p>
<h3 id="get-the-local-ip-of-phone">get the local IP of phone<a href="#get-the-local-ip-of-phone" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>for this run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pkg install iproute2
</span></span><span class="line"><span class="cl">ip a
</span></span></code></pre></div><p>and get <code>wlan0</code> IP or something similar like <code>wlan1</code> if phone is using Wi-Fi.</p>
<h3 id="get-the-username">get the username<a href="#get-the-username" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>username is simplest. you just run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">whoami
</span></span></code></pre></div><p>pretty self-explanatory and it will output username.</p>
<h3 id="get-password">get password<a href="#get-password" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>the password is for logging in and you probably don&rsquo;t have it set, so run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">passwd
</span></span></code></pre></div><p>and set it.</p>
<h3 id="start-ssh-server">start SSH server<a href="#start-ssh-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>first download <code>openssh</code> package:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">pkg install openssh
</span></span></code></pre></div><p>and then run the server:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sshd
</span></span></code></pre></div><p>also you can run <code>sshd &amp;</code> if you want ssh server to keep running in the background after closing termux.</p>
<h3 id="connect-to-phone">connect to phone<a href="#connect-to-phone" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>to connect to that phone run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ssh -p <span class="m">8022</span> &lt;username&gt;@&lt;phone IP&gt;
</span></span></code></pre></div><p><code>-p</code> specifies the port for connection and <code>8022</code> is default on phone I think.</p>
]]></content>
		</item>
		
		<item>
			<title>testing from obsidian on phone</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/testing-from-obsidian-on-phone/</link>
			<pubDate>Mon, 20 Jan 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/testing-from-obsidian-on-phone/</guid>
			<description><![CDATA[i hope this will work and this is my second brain setup on phone]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="chalange">chalange<a href="#chalange" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>the shell command are not usable on mobile and developer is not planning to add that feature either so ill have to push this changes manually from termux but it alr for now</p>
]]></content>
		</item>
		
		<item>
			<title>How to send giant files from windows to Linux (fastest way, local network)</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/how-to-send-giant-files-from-windows-to-linux-fastest-way-local-network/</link>
			<pubDate>Fri, 17 Jan 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/how-to-send-giant-files-from-windows-to-linux-fastest-way-local-network/</guid>
			<description><![CDATA[of course it is not fastest for everyone but i only use one thing that needs downloading, python, to host and on Linux wget to receive it]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="how-to-send-giant-files-from-windows-to-linux-fastest-way-local-network">How to send giant files from windows to Linux (fastest way, local network)<a href="#how-to-send-giant-files-from-windows-to-linux-fastest-way-local-network" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>I needed to sent some files to my server and I was on same network and fastest would probably be to transfer it via cable or something but the private network is also fast</p>
<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<h3 id="on-windows"><strong>On windows</strong><a href="#on-windows" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>have <a href="https://www.python.org/downloads/">python</a>, you probably have that too.
and then host target folder with <code>cmd</code>. go to path file is located in:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="nb">cd</span> /path/to/directory/file is located/in
</span></span></code></pre></div><p>run server with python:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">python -m http.server <span class="m">8000</span>    
</span></span></code></pre></div><p>and also get the IP of that machine to find file</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">ipconfig 
</span></span></code></pre></div><p>this will display network adapters and search for one you are using and get <code>IPv4 Address</code>.</p>
<h3 id="on-linux"><strong>on Linux</strong><a href="#on-linux" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>navigate to directory for download to go in and run:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget http://&lt;widnsows IP&gt;:8000/&lt;file-name-with-extention&gt;
</span></span></code></pre></div><p>if there is multiple files in folder and that what you want to download use:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">wget -r -np -nH --cut-dirs<span class="o">=</span><span class="m">1</span> -A <span class="s2">&#34;episode*&#34;</span> http://&lt;windows machine IP&gt;/&lt;url of folder&gt;
</span></span></code></pre></div><ul>
<li><code>-r</code> downloads content recursively</li>
<li><code>-np</code> doesn&rsquo;t creates parent folder</li>
<li><code>-nh</code> doesn&rsquo;t creates host directory</li>
<li><code>--cur-dirs=1</code> ignores top level directory</li>
<li><code>-A &quot;episode*&quot;</code> only accepts files that match this.
pattern.</li>
</ul>
<p>and the wait.</p>
<p>more on wget <a href="https://www.gnu.org/software/wget/manual/wget.html">here</a>.</p>
<h3 id="note">note<a href="#note" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>this might not work bc windows blocks any kind of incoming network for http and also ping. so what i did was go in <strong>windows security&gt;firewall &amp; network protection</strong> and turn of whichever has your network name in active networks list <strong>temporally</strong>.for me it was public one but it can be private too. and after download turn all of that on again to be protected.</p>
<p>and on classics programmer fashion  i wasted more time figuring all of this out then if i just uploaded it do cloud or something, but i hope there should be no error for  you and this will be fastest.</p>
]]></content>
		</item>
		
		<item>
			<title>README.md</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/readme/</link>
			<pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/readme/</guid>
			<description><![CDATA[README from github]]></description><content type="text/html" mode="escaped"><![CDATA[<h1 id="second-brain">Second Brain<a href="#second-brain" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h1>
<p>A dynamic <strong>blogging</strong> platform <strong>powered by Hugo, GitHub, and Obsidian</strong> for <strong>seamless content creation and publishing.</strong></p>
<h2 id="overview">Overview<a href="#overview" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Second Brain is a streamlined blogging platform hosted on GitHub, designed for creating and sharing knowledge effortlessly. It leverages Hugo for static site generation, the Hermit-v2 theme for a polished look, and Obsidian for intuitive content creation. Posts are written in Markdown and managed through Git, enabling a frictionless workflow for writers and developers alike.</p>
<h2 id="how-it-works">How It Works<a href="#how-it-works" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Second Brain uses a combination of <a href="https://gohugo.io/">Hugo</a>, GitHub, and custom Git branches to manage and deploy content:</p>
<ul>
<li>Hugo: Converts Markdown (.md) files into <code>HTML</code>, powered by the <a href="https://themes.gohugo.io/themes/hermit-v2/">Hermit-v2</a>, eliminating the need for custom <code>HTML</code>, <code>CSS</code>, or <code>JavaScript</code>.</li>
<li>GitHub Workflow:
<ul>
<li><code>Master</code> Branch: Contains the entire project, including the Hugo site source and build pipeline.</li>
<li><code>Posts</code> Branch: A clean branch for submitting new Markdown posts. A GitHub Action automatically moves posts to the <code>content/Posts</code> directory in the master branch and clears the <code>posts</code> branch.</li>
<li><code>For-Hosting</code> Branch: Hosts the built static site (<code>public</code> folder from <code>master</code>) for deployment via GitHub Pages.</li>
</ul>
</li>
<li><a href="https://obsidian.md/">Obsidian</a> Integration: The <code>posts</code> branch also includes an <code>.obsidian</code> configuration, enabling a custom <code>publish</code> command. This allows content to be pushed directly from Obsidian. A Templates folder provides pre-defined front matter for consistent, well-formatted posts.</li>
</ul>
<h2 id="getting-started">Getting Started<a href="#getting-started" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Follow these steps to set up your own Second Brain blog:</p>
<h3 id="prerequisites">Prerequisites<a href="#prerequisites" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ul>
<li>A GitHub account (sign up <a href="https://github.com/signup">here</a>.</li>
<li>Basic familiarity with Git and Markdown.</li>
<li>Optional: Obsidian for local note-taking, content creation and predefined configuration, templates and commands.</li>
</ul>
<h3 id="setup-instructions">Setup Instructions<a href="#setup-instructions" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<ol>
<li>
<p>Fork the Repository:</p>
<ul>
<li>Navigate to the Second Brain repository.</li>
<li>Fork the repository, ensuring all branches are copied (uncheck &ldquo;Copy the master branch only&rdquo;).</li>
<li>Delete contents of <code>posts</code> directory to ensure you my blogs are not on your site.</li>
<li>Enable GitHub Actions in the Actions tab of your forked repository.</li>
</ul>
</li>
<li>
<p>Configure GitHub Pages:</p>
<ul>
<li>Go to Settings &gt; Pages in your repository.</li>
<li>Set the branch to For-Hosting and save. Your site will be live at the URL provided (e.g., https://<!-- raw HTML omitted -->.github.io/Second-Brain/).</li>
</ul>
</li>
<li>
<p>Edit Configuration:</p>
<ul>
<li>Open the hugo.toml file in the master branch.</li>
<li>Update the baseURL to your GitHub Pages URL (e.g., baseURL = &ldquo;https://<!-- raw HTML omitted -->.github.io/Second-Brain/&rdquo;).</li>
<li>Customize [params.author] (name and about) and [[params.socialLinks]] as desired.</li>
<li>Optionally modify copyright, homeSubtitle, footerCopyright, or giturl. more configuretion option <a href="https://gohugo.io/configuration/params/">here</a> and <a href="https://1bl4z3r.github.io/hermit-V2/en/posts/explaining-configs/">here</a> and example <code>hugo.toml</code> files <a href="https://github.com/1bl4z3r/hermit-V2/blob/main/hugo.toml.example">here</a> and <a href="https://github.com/1bl4z3r/hermit-V2/blob/staging/hugo.toml">here</a> and also <a href="https://github.com/demetrebadzaradze/Second-Brain/blob/master/hugo.toml">here</a>.</li>
</ul>
</li>
<li>
<p>Add a Test Post:</p>
<ul>
<li>Switch to the posts branch.</li>
<li>Create a new .md file with the following front matter:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: Your Post Title
</span></span><span class="line"><span class="cl">description: Enter a description here
</span></span><span class="line"><span class="cl">date: 2025-01-15
</span></span><span class="line"><span class="cl">draft: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">toc: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">ShowLastmod: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div><ul>
<li>Commit and push the file. The GitHub Action will move it to the master branch and trigger a site rebuild.</li>
</ul>
</li>
<li>
<p>Set Up Locally with Obsidian:</p>
<ul>
<li>Clone your forked repository:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">git clone &lt;your-repo-url.git&gt;
</span></span></code></pre></div><ul>
<li>Open the repository in Obsidian.</li>
<li>Retain the existing <code>.obsidian</code> folder, which includes plugins for publishing (e.g., <code>shell commands</code> for Git integration).</li>
<li>to publish a post, use Obsidian‚Äôs command palette (<code>Ctrl+P</code>), type <code>publish</code>, and run the command.</li>
<li>Optionally, create templates in a <code>Templates</code> folder for consistent post formatting:</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">---
</span></span><span class="line"><span class="cl">title: <span class="o">{{</span>title<span class="o">}}</span>
</span></span><span class="line"><span class="cl">description: Enter a description here
</span></span><span class="line"><span class="cl">date: <span class="o">{{</span>date<span class="o">}}</span>
</span></span><span class="line"><span class="cl">draft: <span class="nb">false</span>
</span></span><span class="line"><span class="cl">toc: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">ShowLastmod: <span class="nb">true</span>
</span></span><span class="line"><span class="cl">---
</span></span></code></pre></div></li>
</ol>
<h2 id="why-use-second-brain">Why Use Second Brain?<a href="#why-use-second-brain" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Second Brain is designed to:</p>
<ul>
<li>Foster Creativity: Focus on generating ideas rather than storing them, exactly what brain is for.</li>
<li>Share Knowledge: Make your insights accessible to others.</li>
<li>Track Progress: Reflect on past work and projects.
It‚Äôs ideal for developers, writers, and anyone looking to maintain a portfolio or blog with minimal setup.</li>
</ul>
<h2 id="future-plans">Future Plans<a href="#future-plans" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li>Portfolio Expansion: Showcase programming projects and technical deep dives.</li>
<li>Obsidian Integration: Develop a custom Obsidian plugin for seamless post publishing without terminal or web interactions.</li>
<li>Cross-Platform Support: Extend compatibility beyond Windows to macOS and Linux.</li>
<li>Simplified Setup: Streamline configuration for non-technical users, reducing setup friction and merge conflicts.</li>
<li>Content Ideas:
<ul>
<li>Tutorials on home server setups.</li>
<li>In-depth guide on Second Brain‚Äôs architecture.</li>
<li>A roadmap for future projects.</li>
</ul>
</li>
</ul>
<h2 id="contributing">Contributing<a href="#contributing" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>Contributions are welcome! To suggest improvements or report issues:</p>
<ul>
<li>Fork the repository.</li>
<li>Create a new branch for your changes.</li>
<li>Submit a pull request to the master branch.
leave posts untouched.</li>
</ul>
<h2 id="license">License<a href="#license" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<ul>
<li><strong>Code</strong>: The source code, including Hugo configurations, themes, and scripts, is licensed under the <a href="LICENSE">MIT License</a>.</li>
<li><strong>Blog Posts</strong>: The content in the <code>content/Posts</code> directory is licensed under <a href="http://creativecommons.org/licenses/by-nc/4.0/">Creative Commons Attribution-NonCommercial 4.0 International License</a>.</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title>testinn whole site</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/testing-whole-site/</link>
			<pubDate>Mon, 13 Jan 2025 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/testing-whole-site/</guid>
			<description><![CDATA[this site is hosted on github and i have some CI/CD stuff and this is testing it. so, is it working??]]></description><content type="text/html" mode="escaped"><![CDATA[<h3 id="how-does-it-works">how does it works<a href="#how-does-it-works" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>I made posts branch that is clear and gets cleared every time someone pushes to it with workflow that:</p>
<ol>
<li>copies all .md files from posts branch into master</li>
<li>build site with hugo+hermit-v2 and updates repo</li>
<li>then takes <code>public</code> Dir and copies it to <code>For-Hosting</code> branch</li>
<li>and the GitHub pages workflow is being ran and site is being published</li>
</ol>
<h4 id="i-will-be-updating-this-file-about-how-things-work-in-here-and-some-future-stuff-that-i-will-be-doing-on-this-site">I will be updating this file about how things work in here, and some future stuff that I will be doing on this site.<a href="#i-will-be-updating-this-file-about-how-things-work-in-here-and-some-future-stuff-that-i-will-be-doing-on-this-site" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h4>
]]></content>
		</item>
		
		<item>
			<title>Handling images for hugo</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/handling-images-for-hugo/</link>
			<pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/handling-images-for-hugo/</guid>
			<description><![CDATA[how i handle images for hugo]]></description><content type="text/html" mode="escaped"><![CDATA[<h2 id="plan">Plan<a href="#plan" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>so what Hugo want&rsquo;s is to have all images that its gonna use in <code>static/images</code> also link needs to be appropriate.
so for something this simple and easy I wrote a <strong>python script</strong> that:</p>
<ul>
<li>reads all <code>.md</code> files in a directory</li>
<li>finds all images in those files</li>
<li>copies images to <code>static/image</code> files</li>
<li>copes <code>.md</code> files into <code>content/posts</code></li>
</ul>
<p>here is script :</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">os</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">re</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">shutil</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Paths (using raw strings to handle Windows backslashes correctly)</span>
</span></span><span class="line"><span class="cl"><span class="n">posts_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;D:\USER\Notes\Important\BlogPosts&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">images_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;D:\USER\Notes\Important&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">static_images_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;D:\USER\Projects\SecondBrain\static\images&#34;</span>
</span></span><span class="line"><span class="cl"><span class="n">md_output_dir</span> <span class="o">=</span> <span class="sa">r</span><span class="s2">&#34;D:\USER\Projects\SecondBrain\content\Posts&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Define the updated image regex pattern to match both image formats:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 1. ![Alt Text](image-path)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 2. ![[image-path]]</span>
</span></span><span class="line"><span class="cl"><span class="n">image_pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;!\[([^\]]*)\]\(([^)]+)\)|!\[\[([^\]]+)\]\]&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">find_and_process_images</span><span class="p">(</span><span class="n">md_file</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Processing file: </span><span class="si">{</span><span class="n">md_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="c1"># Read the content of the markdown file</span>
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">md_file</span><span class="p">,</span> <span class="s2">&#34;r&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">content</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Find all image references in the Markdown file</span>
</span></span><span class="line"><span class="cl">    <span class="n">image_references</span> <span class="o">=</span> <span class="n">image_pattern</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Found </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">image_references</span><span class="p">)</span><span class="si">}</span><span class="s2"> image references in </span><span class="si">{</span><span class="n">md_file</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Process each image reference</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="k">match</span> <span class="ow">in</span> <span class="n">image_references</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="k">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>  <span class="c1"># Format: ![Alt Text](image-path)</span>
</span></span><span class="line"><span class="cl">            <span class="n">alt_text</span> <span class="o">=</span> <span class="k">match</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="n">image_path</span> <span class="o">=</span> <span class="k">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Found image (Markdown format): Alt Text: &#39;</span><span class="si">{</span><span class="n">alt_text</span><span class="si">}</span><span class="s2">&#39;, Path: </span><span class="si">{</span><span class="n">image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">elif</span> <span class="k">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span>  <span class="c1"># Format: ![[image-path]]</span>
</span></span><span class="line"><span class="cl">            <span class="n">alt_text</span> <span class="o">=</span> <span class="s2">&#34;image&#34;</span>
</span></span><span class="line"><span class="cl">            <span class="n">image_path</span> <span class="o">=</span> <span class="k">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Found image (Custom format): Path: </span><span class="si">{</span><span class="n">image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># If the image path is an online URL, skip it</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">image_path</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;http&#34;</span><span class="p">)</span> <span class="ow">or</span> <span class="n">image_path</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s2">&#34;https&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Skipping online image: </span><span class="si">{</span><span class="n">image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">continue</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="c1"># Determine if the image is a local file</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_filename</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">image_path</span><span class="p">)</span>  <span class="c1"># Get the file name from the path</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_extension</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">splitext</span><span class="p">(</span><span class="n">image_filename</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">lower</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Image file name: </span><span class="si">{</span><span class="n">image_filename</span><span class="si">}</span><span class="s2">, Extension: </span><span class="si">{</span><span class="n">image_extension</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">image_new_filename</span> <span class="o">=</span> <span class="n">image_filename</span>
</span></span><span class="line"><span class="cl">        <span class="n">image_new_filename</span> <span class="o">=</span> <span class="n">image_new_filename</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="s1">&#39;_&#39;</span><span class="p">)</span>  <span class="c1"># Replace spaces with underscores</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Updated image filename: </span><span class="si">{</span><span class="n">image_new_filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="c1"># Build the full image path in the images directory</span>
</span></span><span class="line"><span class="cl">        <span class="n">local_image_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">images_dir</span><span class="p">,</span> <span class="n">image_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Checking for image in local folder: </span><span class="si">{</span><span class="n">local_image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">local_image_path</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Image found in local folder: </span><span class="si">{</span><span class="n">local_image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            
</span></span><span class="line"><span class="cl">            <span class="c1"># The image exists locally, copy it to the Hugo static images directory</span>
</span></span><span class="line"><span class="cl">            <span class="n">destination_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">static_images_dir</span><span class="p">,</span> <span class="n">image_new_filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Copying image to Hugo static images folder: </span><span class="si">{</span><span class="n">destination_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">exists</span><span class="p">(</span><span class="n">destination_path</span><span class="p">):</span>  <span class="c1"># Only copy if not already copied</span>
</span></span><span class="line"><span class="cl">                <span class="n">shutil</span><span class="o">.</span><span class="n">copy</span><span class="p">(</span><span class="n">local_image_path</span><span class="p">,</span> <span class="n">destination_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Successfully copied image: </span><span class="si">{</span><span class="n">image_filename</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">                <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Image already exists in destination: </span><span class="si">{</span><span class="n">destination_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="c1"># Update the image reference in the Markdown file</span>
</span></span><span class="line"><span class="cl">            <span class="n">new_image_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s2">&#34;Second-Brain/images/</span><span class="si">{</span><span class="n">image_new_filename</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">            <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;![</span><span class="si">{</span><span class="n">alt_text</span><span class="si">}</span><span class="s2">](</span><span class="si">{</span><span class="n">image_path</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;![</span><span class="si">{</span><span class="n">alt_text</span><span class="si">}</span><span class="s2">](</span><span class="si">{</span><span class="n">new_image_path</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;![[</span><span class="si">{</span><span class="n">image_path</span><span class="si">}</span><span class="s2">]]&#34;</span><span class="p">,</span> <span class="sa">f</span><span class="s2">&#34;![</span><span class="si">{</span><span class="n">alt_text</span><span class="si">}</span><span class="s2">](</span><span class="si">{</span><span class="n">new_image_path</span><span class="si">}</span><span class="s2">)&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Updated image path in Markdown: </span><span class="si">{</span><span class="n">new_image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">else</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Image not found in the images folder: </span><span class="si">{</span><span class="n">local_image_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1"># Save the modified content into the output folder, keeping the original filename</span>
</span></span><span class="line"><span class="cl">    <span class="n">new_md_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">md_output_dir</span><span class="p">,</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">md_file</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Saving updated Markdown file to: </span><span class="si">{</span><span class="n">new_md_file_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">new_md_file_path</span><span class="p">,</span> <span class="s2">&#34;w&#34;</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="s2">&#34;utf-8&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">file</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="n">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">content</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;Successfully updated and saved Markdown file: </span><span class="si">{</span><span class="n">new_md_file_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Step 2: Process all markdown files in the posts directory</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">os</span><span class="o">.</span><span class="n">listdir</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s2">&#34;.md&#34;</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">        <span class="n">md_file_path</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">posts_dir</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Processing Markdown file: </span><span class="si">{</span><span class="n">md_file_path</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">find_and_process_images</span><span class="p">(</span><span class="n">md_file_path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="s2">&#34;</span><span class="se">\n</span><span class="s2">Processing complete!&#34;</span><span class="p">)</span>
</span></span></code></pre></div><h2 id="types-of-image-syntax-in-markdown-file">Types of image syntax in markdown file<a href="#types-of-image-syntax-in-markdown-file" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>in <code>.md</code> file there is many ways to insert image here is some:</p>
<ol>
<li><code>![Alt text](image_url)</code>
this is simple when you copy file that online and after pasting it this is how its formatted. <code>image_url</code>  represents online URL of image like:  <a href="https://m.media-amazon.com/images/I/61oJQApbXkL._AC_SL1002_.jpg">https://m.media-amazon.com/images/I/61oJQApbXkL._AC_SL1002_.jpg</a>.
and <code>Alt text</code> is just a label</li>
<li><code>![Alt text](path/to/image.jpg)</code>
now this is local and its a full path</li>
<li><code>![Alt text](path/to/image%20with%20spaces.jpg)</code>
this is also local but with spaces this is actually tricky one, because you cant actually have spaces in URI  so they are replaced with <code>%20</code>.</li>
<li>
<pre tabindex="0"><code>![A PNG Image](image.png) 
![A JPEG Image](image.jpg) 
![An SVG Logo](logo.svg)
</code></pre>this is also local and this also means that it&rsquo;s in same directory</li>
<li><code>![[image.png]]</code>
this doesn&rsquo;t one is same as 4 but it doesn&rsquo;t has label</li>
</ol>
]]></content>
		</item>
		
		<item>
			<title>Host terraria server on Linux server</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/host-terraria-server-on-linux-server/</link>
			<pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/host-terraria-server-on-linux-server/</guid>
			<description><![CDATA[&lt;no value&gt;]]></description><content type="text/html" mode="escaped"><![CDATA[<p><strong>easiest and simplest way</strong> to do this is to run it on <a href="https://www.youtube.com/watch?v=oUnWU4Y4kSY">docker</a>, because docker is pure magic and there docker image that handles all of what this needs called <code>rathena/terraria</code>.</p>
<h2 id="installing-docker">installing docker<a href="#installing-docker" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>update repos:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt update 
</span></span></code></pre></div><p>then install docker:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo apt install -y docker.io
</span></span></code></pre></div><p>and enable sysctl:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">sudo systemctl <span class="nb">enable</span> --now docker
</span></span></code></pre></div><h2 id="pull-and-run-image">pull and run image<a href="#pull-and-run-image" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>probably making new directory for server configs is a good idea:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">mkdir ~/opt/terraria/server1
</span></span></code></pre></div><p>or something like in games directory what ever you would like just be careful with perditions.</p>
<ul>
<li>
<h3 id="pull-the-image">pull the image<a href="#pull-the-image" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker pull rathena/terraria
</span></span></code></pre></div></li>
<li>
<h3 id="run-the-server">run the server<a href="#run-the-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker run -d <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--name<span class="o">=</span>terraria-server <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-p 7777:7777 <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-v ~/opt/terraria/server1:/config <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">WORLD_NAME</span><span class="o">=</span><span class="s2">&#34;MyWorld&#34;</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">MAX_PLAYERS</span><span class="o">=</span><span class="m">10</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>-e <span class="nv">DIFFICULTY</span><span class="o">=</span><span class="m">2</span> <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>--restart unless-stopped <span class="se">\
</span></span></span><span class="line"><span class="cl"><span class="se"></span>rathena/terraria
</span></span></code></pre></div>now here there might be some <strong>things to modify</strong>
<ul>
<li>
<p><code>--name</code> is a name of container this will be used for starting and stopping it if you forget run <code>docker ps</code></p>
</li>
<li>
<p><code>-p</code> shows witch ports to forward from container to real machine and <code>7777</code> is a default port for terraria server. if you are running more then one definitely change this. if not this is good.</p>
</li>
<li>
<p><code>-v</code> binds <code>/configs</code> folder on container to <code>~/opt/terraria/server1</code> on our server witch we initially crated, if you want to bind it somewhere else just change the <code>~/opt/terraria/server1</code> part to your desired path and again be careful with permeations.</p>
</li>
<li>
<p><code>-e</code> makes environmental variables to configure server and thy are pretty self explanatory.</p>
<ol>
<li><code>WORD_NAME</code> specifies name of the world.</li>
<li><code>MAX_PLAYERS</code> specifies max player count.</li>
<li><code>DIFFICULTY</code> specifies difficulty of the game like
<ul>
<li><code>0</code>: Normal</li>
<li><code>1</code>: Expert</li>
<li><code>2</code>: Master</li>
<li><code>3</code>: Journey Mode
change as you wish.</li>
</ul>
</li>
<li><strong>some other useful environmental variables</strong> are:
<ul>
<li><code>-e PASSWORD=&quot;yourpassword&quot;</code> specifies password for the server</li>
<li><code>-e SEED=&quot;worldseed&quot;</code>: Specifies a seed for world generation.</li>
<li><code>-e PORT=7777</code>: Sets the server&rsquo;s port. again if you are running another server change the port witch it runs on here and port forwarded in <code>-p</code> flag</li>
</ul>
</li>
<li><code>--restart unless-stopped</code> this ensures that after power out of restart or shut down server starts automatically if you don&rsquo;t want that, delete it.</li>
<li>and <code>  rathena/terraria</code> this you don&rsquo;t want to change, its a docker image witch container is created from.</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="managing-server">managing server<a href="#managing-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>now at this point server is running and here are some useful command:</p>
<ul>
<li><strong>Stop the server</strong>: <code>docker stop terraria-server</code></li>
<li><strong>Start the server</strong>: <code>docker start terraria-server</code></li>
<li><strong>Check logs</strong>: <code>docker logs -f terraria-server</code>
if its called different name check with <code>docker ps</code></li>
</ul>
<h2 id="accessing-the-server">accessing the server<a href="#accessing-the-server" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p>now for me I&rsquo;m using <a href="https://tailscale.com/">tailscale</a> witch is kind like a <a href="https://azure.microsoft.com/en-us/resources/cloud-computing-dictionary/what-is-vpn">VPN</a> and works behind <a href="https://nfware.com/blog/what-is-the-difference-between-nat-and-cgnat">CG-NAT</a> witch is my problem too, but its solved and for me and my friend it will work just fine, all they need to do is use my server as they exit node turn the connection on and write in its tailscale IP and then port.</p>
<h3 id="if-you-are-not-using-tailscale">if you are not using tailscale<a href="#if-you-are-not-using-tailscale" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h3>
<p>this is not recommended but you forward your server&rsquo;s terraria&rsquo;s port and then share your public IP address to people that want to join and port. this doesn&rsquo;t work for CG-NAT.</p>
<p><a href="https://nordvpn.com/blog/open-ports-on-router/">how to forward ports on your router?</a></p>
<h2 id="and-if-you-are-thief-and-have-a-cracked-version-of-terraria-or-friend-has">And if you are thief and have a cracked version of Terraria (or friend has)<a href="#and-if-you-are-thief-and-have-a-cracked-version-of-terraria-or-friend-has" class="anchor" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
      stroke-linecap="round" stroke-linejoin="round">
      <path d="M15 7h3a5 5 0 0 1 5 5 5 5 0 0 1-5 5h-3m-6 0H6a5 5 0 0 1-5-5 5 5 0 0 1 5-5h3"></path>
      <line x1="8" y1="12" x2="16" y2="12"></line>
   </svg></a></h2>
<p><strong>first off all that violates Terraria&rsquo;s terms of service and if you can you should 100% support the developer and get the real licensed version. allowing cracked users  also is a bit risky because those users also bypass security checks.</strong></p>
<p>but if your friend is cheap and won&rsquo;t buy it :</p>
<ol>
<li>locate the <code>serverconfig.txt</code> file, for us it will be here <code>~/opt/terraria/server1/serverconfig.txt</code> and open it up with some text editor:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">nano ~/opt/terraria/server1/serverconfig.txt
</span></span></code></pre></div></li>
<li>and change <code>ValidateSteam=</code> from <code>true</code> to <code>false</code></li>
<li>and restart the container:
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">docker restart terraria-server
</span></span></code></pre></div></li>
</ol>
<p>and it should work now for cracked players.</p>
]]></content>
		</item>
		
		<item>
			<title>The end and a beginning</title>
			<link>https://demetrebadzaradze.github.io/Second-Brain/posts/the-end-and-a-beginning/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>Demetre Badzgaradze</author><guid>https://demetrebadzaradze.github.io/Second-Brain/posts/the-end-and-a-beginning/</guid>
			<description><![CDATA[depending on the way look at this is ether a first file or last, start or a finish, beginning or end.]]></description><content type="text/html" mode="escaped"><![CDATA[]]></content>
		</item>
		
	</channel>
</rss>
